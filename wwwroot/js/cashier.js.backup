// ===============================================
// JavaScript for Cashier Page - Clean Version
// ===============================================

// ===============================================
// Simplified Cashier System - Global Variables
// ===============================================
let cart = [];
let isReturnMode = false; // Simple toggle instead of multiple modes
let currentSearchMode = 'qr';
let searchTimeout = null;
let selectedProductInfo = null; // For color/size selection


// Make cart accessible globally
window.cart = cart;

// Clean up old cart tracker entries to prevent memory leaks
function cleanupCartTracker() {
    if (!window.cartAddTracker) return;
    
    const now = Date.now();
    const maxAge = 30000; // 30 seconds
    
    Object.keys(window.cartAddTracker).forEach(key => {
        if (now - window.cartAddTracker[key] > maxAge) {
            delete window.cartAddTracker[key];
        }
    });
}

// Clean up old QR search tracker entries
function cleanupQRSearchTracker() {
    if (!window.qrSearchTracker) return;
    
    const now = Date.now();
    const maxAge = 30000; // 30 seconds
    
    Object.keys(window.qrSearchTracker).forEach(key => {
        if (now - window.qrSearchTracker[key] > maxAge) {
            delete window.qrSearchTracker[key];
        }
    });
}

// Run cleanup every 30 seconds
setInterval(cleanupCartTracker, 30000);
setInterval(cleanupQRSearchTracker, 30000);

// إزالة رسائل console في الإنتاج


// منع inspect للصفحة عند استخدام الماسح الضوئي
document.addEventListener('keydown', function(e) {
    // منع F12 و Ctrl+Shift+I و Ctrl+Shift+C
    if (e.key === 'F12' || 
        (e.ctrlKey && e.shiftKey && e.key === 'I') ||
        (e.ctrlKey && e.shiftKey && e.key === 'C') ||
        (e.ctrlKey && e.key === 'u')) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
});

// منع right-click في منطقة الماسح الضوئي
document.addEventListener('contextmenu', function(e) {
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput && e.target.closest('.qr-input-group')) {
        e.preventDefault();
        return false;
    }
});

// Debug function to check cart status
window.checkCart = function() {
    return cart;
};

// Debug function to test color/size modal
// Make handleColorSizeConfirm globally available
window.handleColorSizeConfirm = handleColorSizeConfirm;

// Test function to verify button is working
// Debug function to check return tracking records
window.checkReturnTrackings = function(invoiceNumber = '') {
   
    
    const url = invoiceNumber 
        ? `/Cashier/GetReturnTrackings?invoiceNumber=${encodeURIComponent(invoiceNumber)}`
        : '/Cashier/GetReturnTrackings';
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
               
                
                if (data.trackings.length > 0) {
                  
                } else {
                 
                }
            } else {
               
            }
        })
        .catch(error => {
           
        });
};

// ===============================================
// Basic Functions
// ===============================================

// Get current mode (simplified)
function getCurrentMode() {
    return isReturnMode ? 'return' : 'sale';
}

// Note: Automatic number generation has been removed as requested

// Note: Fallback number generation has been removed as requested



// Check if invoice number already exists
async function checkInvoiceNumberDuplicate(invoiceNumber) {
    if (!invoiceNumber || invoiceNumber.trim() === '') {
        clearInvoiceNumberStatus();
        return null;
    }
    
    try {
        const response = await fetch(`/Cashier/CheckInvoiceNumberDuplicate?invoiceNumber=${encodeURIComponent(invoiceNumber.trim())}`);
        const result = await response.json();
        
        const statusDiv = document.getElementById('invoiceNumberStatus');
        const input = document.getElementById('invoiceNumber');
        
        if (result.exists) {
            statusDiv.innerHTML = '<small class="text-danger">❌ هذا الرقم مستخدم بالفعل في فاتورة أخرى</small>';
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
        } else {
            statusDiv.innerHTML = '<small class="text-success">✅ هذا الرقم متاح للاستخدام</small>';
            input.classList.add('is-valid');
            input.classList.remove('is-invalid');
        }
        
        return result;
    } catch (error) {
        console.error('Error checking invoice number:', error);
        const statusDiv = document.getElementById('invoiceNumberStatus');
        statusDiv.innerHTML = '<small class="text-warning">⚠️ خطأ في التحقق من الرقم</small>';
        return { exists: false, message: 'خطأ في التحقق' };
    }
}

// Check if order number already exists
async function checkOrderNumberDuplicate(orderNumber) {
    if (!orderNumber || orderNumber.trim() === '') {
        clearOrderNumberStatus();
        return null;
    }
    
    try {
        const response = await fetch(`/Cashier/CheckOrderNumberDuplicate?orderNumber=${encodeURIComponent(orderNumber.trim())}`);
        const result = await response.json();
        
        const statusDiv = document.getElementById('orderNumberStatus');
        const input = document.getElementById('orderNumber');
        
        if (result.exists) {
            statusDiv.innerHTML = '<small class="text-danger">❌ هذا الرقم مستخدم بالفعل في أمر آخر</small>';
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
        } else {
            statusDiv.innerHTML = '<small class="text-success">✅ هذا الرقم متاح للاستخدام</small>';
            input.classList.add('is-valid');
            input.classList.remove('is-invalid');
        }
        
        return result;
    } catch (error) {
        console.error('Error checking order number:', error);
        const statusDiv = document.getElementById('orderNumberStatus');
        statusDiv.innerHTML = '<small class="text-warning">⚠️ خطأ في التحقق من الرقم</small>';
        return { exists: false, message: 'خطأ في التحقق' };
    }
}

// Clear invoice number status
function clearInvoiceNumberStatus() {
    const statusDiv = document.getElementById('invoiceNumberStatus');
    const input = document.getElementById('invoiceNumber');
    if (statusDiv) statusDiv.innerHTML = '';
    if (input) {
        input.classList.remove('is-valid', 'is-invalid');
    }
}

// Clear order number status
function clearOrderNumberStatus() {
    const statusDiv = document.getElementById('orderNumberStatus');
    const input = document.getElementById('orderNumber');
    if (statusDiv) statusDiv.innerHTML = '';
    if (input) {
        input.classList.remove('is-valid', 'is-invalid');
    }
}

// Toggle between sale and return mode - REMOVED
// This function has been removed as the mode selection section was removed from the UI


// Enhanced product search with multiple modes and autocomplete
let searchCache = new Map();



// Enhanced product search function
async function searchProducts(term, options = {}) {
    const {
        category = '',
        color = '',
        size = '',
        minPrice = null,
        maxPrice = null,
        includeOutOfStock = true,
        searchMode = 'standard',
        limit = 20,
        useCache = true
    } = options;

    // Create cache key
    const cacheKey = JSON.stringify({ term, category, color, size, minPrice, maxPrice, includeOutOfStock, searchMode, limit });
    
    // Check cache first
    if (useCache && searchCache.has(cacheKey)) {
       
        return searchCache.get(cacheKey);
    }

    try {
        // Build query parameters
        const params = new URLSearchParams();
        if (term) params.append('term', term);
        if (category) params.append('category', category);
        if (color) params.append('color', color);
        if (size) params.append('size', size);
        if (minPrice !== null) params.append('minPrice', minPrice);
        if (maxPrice !== null) params.append('maxPrice', maxPrice);
        params.append('includeOutOfStock', includeOutOfStock);
        params.append('searchMode', searchMode);
        params.append('limit', limit);

     
        
        const response = await fetch(`/Cashier/SearchProducts?${params.toString()}`);
        const result = await response.json();

        // Cache successful results
        if (useCache && result.success) {
            searchCache.set(cacheKey, result);
            
            // Clear old cache entries (keep only last 20)
            if (searchCache.size > 20) {
                const firstKey = searchCache.keys().next().value;
                searchCache.delete(firstKey);
            }
        }

        return result;
    } catch (error) {
       
        return {
            success: false,
            message: 'خطأ في البحث',
            products: []
        };
    }
}

// Product autocomplete/suggestions
async function getProductSuggestions(term, limit = 5) {
    if (!term || term.length < 2) {
        return { success: false, suggestions: [] };
    }

    try {
        const response = await fetch(`/Cashier/GetProductSuggestions?term=${encodeURIComponent(term)}&limit=${limit}`);
        const result = await response.json();
        return result;
    } catch (error) {
      
        return { success: false, suggestions: [] };
    }
}

// Live search with debouncing
function initializeLiveSearch(inputElement, resultsContainer, onSelectCallback) {
    if (!inputElement || !resultsContainer) return;

    let debounceTimer = null;
    let currentTerm = '';

    inputElement.addEventListener('input', function() {
        const term = this.value.trim();
        
        // Clear previous timer
        if (debounceTimer) {
            clearTimeout(debounceTimer);
        }

        // Clear results if input is too short
        if (term.length < 2) {
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'none';
            return;
        }

        // Skip if same term
        if (term === currentTerm) return;
        currentTerm = term;

        // Show loading
        resultsContainer.innerHTML = '<div class="search-loading">🔍 جاري البحث...</div>';
        resultsContainer.style.display = 'block';

        // Debounce search
        debounceTimer = setTimeout(async () => {
            try {
                const result = await searchProducts(term, { limit: 10 });
                
                if (result.success && result.products.length > 0) {
                    displaySearchResults(result.products, resultsContainer, onSelectCallback);
                } else {
                    resultsContainer.innerHTML = '<div class="search-no-results">❌ لا توجد نتائج</div>';
                }
            } catch (error) {
                console.error('❌ Live search error:', error);
                resultsContainer.innerHTML = '<div class="search-error">❌ خطأ في البحث</div>';
            }
        }, 300); // 300ms debounce
    });

    // Hide results when clicking outside
    document.addEventListener('click', function(event) {
        if (!inputElement.contains(event.target) && !resultsContainer.contains(event.target)) {
            resultsContainer.style.display = 'none';
        }
    });
}

// Display search results in dropdown
function displaySearchResults(products, container, onSelectCallback) {
    if (!products || !container) return;

    let html = '<div class="search-results-dropdown">';
    
    products.forEach(product => {
        const stockClass = product.isAvailable ? 'available' : 'out-of-stock';
        const stockIcon = product.isAvailable ? '✅' : '❌';
        
        html += `
            <div class="search-result-item ${stockClass}" data-product-id="${product.id}" onclick="selectSearchResult(${product.id}, '${escapeHtml(product.name)}', ${product.price}, '${product.color || ''}', '${product.size || ''}')">
                <div class="product-info">
                    <div class="product-name">${escapeHtml(product.name)}</div>
                    <div class="product-details">
                        <span class="price">💰 ${product.price.toFixed(2)} جنيه</span>
                        <span class="stock">${stockIcon} ${product.stockStatus}</span>
                        ${product.category ? `<span class="category">📁 ${escapeHtml(product.category)}</span>` : ''}
                    </div>
                </div>
                <div class="product-actions">
                    <button type="button" class="btn-add-search" onclick="event.stopPropagation(); addProductToCart(${product.id}, '${escapeHtml(product.name)}', ${product.price}, '${product.color || ''}', '${product.size || ''}')">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
    container.style.display = 'block';
    
    // Add click handlers if callback provided
    if (onSelectCallback) {
        container.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', function() {
                const productId = this.dataset.productId;
                const productName = this.querySelector('.product-name').textContent;
                const productPrice = parseFloat(this.querySelector('.price').textContent.match(/[\d.]+/)[0]);
                
                onSelectCallback(productId, productName, productPrice);
                container.style.display = 'none';
            });
        });
    }
}

// Search result selection handler
function selectSearchResult(productId, productName, productPrice, productColor = null, productSize = null) {
    
    
    // Add to cart automatically with default color and size
    addProductToCart(productId, productName, productPrice, productColor, productSize);
    
    // Clear search results
    const searchContainers = document.querySelectorAll('.search-results-dropdown');
    searchContainers.forEach(container => {
        container.style.display = 'none';
    });
    
    // Show confirmation message
    showMessage(`✅ تم إضافة ${productName} إلى السلة`, 'success');
}

// Add product to cart (simplified with positive/negative quantities)
async function addProductToCart(productId, productName, productPrice, productColor = null, productSize = null) {
    // Validate input parameters
    if (!productId || !productName || !productPrice) {
        console.error('❌ Invalid parameters for addProductToCart:', { productId, productName, productPrice });
        showMessage('❌ بيانات المنتج غير صحيحة', 'error');
        return;
    }
    
    // Proceed with duplicate-prevention logic below; do not short-circuit directly to addProductToCartWithColorSize
    
    // Enhanced duplicate prevention at cart level
    const now = Date.now();
    const cartKey = `${productId}_${productName}`;
    
    // Initialize cart tracker
    if (!window.cartAddTracker) {
        window.cartAddTracker = {};
    }
    
    // Prevent adding the same product within 1 second
    if (window.cartAddTracker[cartKey] && (now - window.cartAddTracker[cartKey]) < 1000) {
       
        return;
    }
    
    // Update tracker
    window.cartAddTracker[cartKey] = now;
    
    try {
       
        
        // Determine quantity based on current mode
        const baseQuantity = 1;
        const quantity = isReturnMode ? -baseQuantity : baseQuantity;
        const total = quantity * productPrice;
        
       
        
        // Validate productId
        if (!productId || productId === 0) {
            console.error('❌ Invalid productId:', productId);
            alert('❌ معرف المنتج غير صحيح');
            return;
        }
        
        // Create cart item
        const cartItem = {
            id: Date.now(),
            productId: parseInt(productId), // Ensure it's a number
            name: productName,
            price: parseFloat(productPrice), // Ensure it's a number
            quantity: quantity, // Positive for sale, negative for return
            total: total,       // Will be negative for returns
            discount: 0         // Initialize discount to 0
        };
        
        // Ensure total is correctly calculated
        cartItem.total = quantity * productPrice;
        
        console.log('📦 Created cart item:', cartItem);
        
        // Check for duplicate returns prevention
        if (isReturnMode) {
            const existingReturnItem = cart.find(item => 
                (item.productId == cartItem.productId || item.name === cartItem.name) && item.quantity < 0
            );
            
            if (existingReturnItem) {
                
                existingReturnItem.quantity -= 1; // Make it more negative
                
                // Recalculate total with discount
                const itemSubTotal = Math.abs(existingReturnItem.price * existingReturnItem.quantity);
                const discountAmount = existingReturnItem.discount || 0; // Direct amount
                existingReturnItem.total = Math.round(-(itemSubTotal - discountAmount) * 100) / 100;
                
              
            } else {
        // Add to cart
        cart.push(cartItem);
            }
        } else {
            // Add to cart normally for sales
            cart.push(cartItem);
        }
        
        window.cart = cart;
        
        // Update display
        updateCartDisplay();
        updateCartSummary();
        
        // Update process button state safely
        if (typeof updateProcessButtonState === 'function') {
        updateProcessButtonState();
        } else {
            console.warn('⚠️ updateProcessButtonState function not available');
        }
        
        const modeText = isReturnMode ? 'للإرجاع' : 'للبيع';
       
        
        // Show success notification
        showMessage(`✅ تم إضافة ${productName} ${modeText}`, 'success');
        
        // Note: Automatic number generation has been removed as requested
        
    } catch (error) {
       
        showMessage('❌ خطأ في إضافة المنتج للسلة', 'error');
    }
}

// Enhanced QR/Scanner input processing
function processScannerInput(scannedData) {

    if (!scannedData || typeof scannedData !== 'string') {
        updateQRStatus('error', 'بيانات غير صحيحة');
        showMessage('بيانات الماسح غير صحيحة', 'warning');
        return;
    }
    
    // Clean and validate the scanned data
    let cleanData = scannedData.trim();
    
    // Remove special characters that might cause issues (keep dots for decimal numbers)
    cleanData = cleanData.replace(/[^\w\s\-_\.]/g, '');
    
    // Remove extra spaces
    cleanData = cleanData.replace(/\s+/g, ' ').trim();
    
    if (!cleanData || cleanData.length < 1) {
        updateQRStatus('error', 'رمز QR فارغ');
        showMessage('رجاءً امسح QR Code صحيح', 'warning');
        
        // Reset for next scan
        setTimeout(() => {
            updateQRStatus('ready', 'جاهز للمسح');
            refocusQRInput();
        }, 1500);
        return;
    }
    
    // Use the optimized search function
    simpleQRSearch(cleanData);
}



// Refocus QR input for continuous scanning (only when appropriate)
function refocusQRInput() {
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput && currentSearchMode === 'qr' && !isUserInteractingWithOtherElements()) {
        // Clear input first
        qrInput.value = '';
        
        // Refocus with slight delay to ensure stability, but only if user isn't busy
        setTimeout(() => {
            if (!isUserInteractingWithOtherElements()) {
                qrInput.focus();
            }
        }, 100);
    }
}

// Play success sound for scanner feedback
function playSuccessSound() {
    try {
        // Create audio context for beep sound
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = 800; // High pitch beep
        gainNode.gain.value = 0.1; // Low volume
        
        oscillator.start();
        setTimeout(() => {
            oscillator.stop();
        }, 150); // Short beep
    } catch (error) {
        // Ignore audio errors - not critical
        console.log('Audio feedback not available');
    }
}


// Update QR status display
function updateQRStatus(status, message) {
    
    const qrStatus = document.getElementById('qrStatus');
    if (qrStatus) {
        // Update the text inside the status-text span
        const statusText = qrStatus.querySelector('.status-text');
        if (statusText) {
            statusText.textContent = message;
        } else {
            // Fallback if structure is different
            qrStatus.textContent = message;
        }
        
        // Remove existing status classes
        qrStatus.classList.remove('status-ready', 'status-loading', 'status-success', 'status-error');
        
        // Add appropriate status class
        switch(status) {
            case 'ready':
                qrStatus.classList.add('status-ready');
                qrStatus.style.color = '#007bff';
                break;
            case 'loading':
                qrStatus.classList.add('status-loading');
                qrStatus.style.color = '#ffc107';
                break;
            case 'success':
                qrStatus.classList.add('status-success');
                qrStatus.style.color = '#28a745';
                break;
            case 'error':
                qrStatus.classList.add('status-error');
                qrStatus.style.color = '#dc3545';
                break;
            default:
                qrStatus.style.color = '#6c757d';
        }
    }
}

// Clear QR input field
function clearQRInput() {
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput) {
        qrInput.value = '';
        qrInput.focus();
        updateQRStatus('ready', 'جاهز للمسح');
       
    }
}


// Check if user is interacting with other important elements
function isUserInteractingWithOtherElements() {
    const activeElement = document.activeElement;
    if (!activeElement) return false;
    
    // Don't refocus if user is typing in other important inputs
    const importantInputs = ['customerSelect', 'customerName', 'customerPhone', 'amountPaid'];
    const isImportantInput = importantInputs.some(id => activeElement.id === id);
    
    // Don't refocus if user is interacting with buttons or modals
    const isButton = activeElement.tagName === 'BUTTON';
    const isInModal = activeElement.closest('.modal');
    
    return isImportantInput || isButton || isInModal;
}

// Event handlers for QR input - Optimized version
function handleQRKeydown(e) {
    // Prevent inspect and debugging shortcuts
    if (e.key === 'F12' || e.key === 'F11' || e.key === 'F5' || 
        (e.ctrlKey && e.shiftKey && e.key === 'I') ||
        (e.ctrlKey && e.shiftKey && e.key === 'C') ||
        (e.ctrlKey && e.key === 'u')) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }
    
    if (e.key === 'Enter') {
        e.preventDefault();
        e.stopPropagation();
        
        const qrCode = e.target.value.trim();
        
        if (qrCode) {
            // Process the QR code
            simpleQRSearch(qrCode);
            e.target.value = ''; // Clear immediately for next scan
        } else {
            updateQRStatus('error', 'اكتب رمز QR');
            setTimeout(() => {
                updateQRStatus('ready', 'جاهز للمسح');
            }, 2000);
        }
        return false;
    }
}

function handleQRInput(e) {
    // This fires on every character input
    const value = e.target.value;
    if (value.length > 0) {
        updateQRStatus('loading', `كتابة... (${value.length} حرف)`);
    } else {
        updateQRStatus('ready', 'جاهز للمسح');
    }
}

function handleQRPaste(e) {
    e.preventDefault();
    const pastedData = (e.clipboardData || window.clipboardData).getData('text');
    if (pastedData && pastedData.trim()) {
        simpleQRSearch(pastedData.trim());
        e.target.value = '';
    }
}

// SIMPLE QR SEARCH - Optimized and clean with enhanced validation
async function simpleQRSearch(qrCode) {
    if (!qrCode || qrCode.trim() === '') {
        updateQRStatus('error', 'رمز QR فارغ');
        return;
    }
    
    // Enhanced validation
    const cleanQRCode = qrCode.trim();
    if (cleanQRCode.length < 1) {
        updateQRStatus('error', 'رمز QR فارغ');
        showMessage('رجاءً امسح QR Code صحيح', 'warning');
        return;
    }
    
    // Prevent multiple searches for the same QR code within 3 seconds
    const now = Date.now();
    const searchKey = `qr_search_${cleanQRCode}`;
    
    if (!window.qrSearchTracker) {
        window.qrSearchTracker = {};
    }
    
    if (window.qrSearchTracker[searchKey] && (now - window.qrSearchTracker[searchKey]) < 3000) {
        console.log(`⚠️ QR: Preventing duplicate search for ${cleanQRCode} (last search ${now - window.qrSearchTracker[searchKey]}ms ago)`);
        showMessage(`تم منع البحث المكرر لنفس الرمز`, 'warning');
        return;
    }
    
    // Lock to prevent concurrent processing of the same QR end-to-end
    if (!window.qrProcessing) window.qrProcessing = {};
    if (window.qrProcessing[searchKey]) {
        return;
    }
    window.qrProcessing[searchKey] = true;
    window.qrSearchTracker[searchKey] = now;
    
    updateQRStatus('loading', 'جاري البحث...');
    
    try {
        // Direct API call - simple and straightforward
        const response = await fetch(`/Cashier/SearchProducts?term=${encodeURIComponent(cleanQRCode)}&includeOutOfStock=true`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success && result.products && result.products.length > 0) {
            // Enhanced validation: Check if we have exactly one product or multiple
            if (result.products.length > 1) {
                console.warn(`⚠️ Multiple products found for QR: ${cleanQRCode}, using first one`);
                showMessage(`تم العثور على ${result.products.length} منتجات، سيتم إضافة الأول`, 'warning');
            }
            
            const product = result.products[0];
            
            // Enhanced validation before adding to cart
            if (!product.id || !product.name || !product.price) {
                console.error('❌ Invalid product data from search:', product);
                updateQRStatus('error', 'بيانات المنتج غير صحيحة');
                showMessage('بيانات المنتج غير صحيحة', 'error');
                return;
            }
            
            // Add to cart with validation
            addProductToCart(product.id, product.name, product.price, product.color || '', product.size || '');
            updateQRStatus('success', `✅ ${product.name}`);
            showMessage(`تم إضافة: ${product.name}`, 'success');
            
            // Clear QR input immediately
            const qrInput = document.getElementById('qrCodeInput');
            if (qrInput) {
                qrInput.value = '';
            }
            
            // Quick reset for next scan
            setTimeout(() => {
                updateQRStatus('ready', 'جاهز للمسح');
                if (qrInput) qrInput.focus();
            }, 1000);
            
        } else {
            updateQRStatus('error', `❌ لم يتم العثور على: ${cleanQRCode}`);
            showMessage(`المنتج غير موجود: ${cleanQRCode}`, 'error');
            
            // Reset for next scan
            setTimeout(() => {
                updateQRStatus('ready', 'جاهز للمسح');
                const qrInput = document.getElementById('qrCodeInput');
                if (qrInput) qrInput.focus();
            }, 2000);
        }
        
    } catch (error) {
        console.error('QR Search Error:', error);
        updateQRStatus('error', 'خطأ في البحث');
        showMessage('خطأ في البحث', 'error');
        
        // Reset for next scan
        setTimeout(() => {
            updateQRStatus('ready', 'جاهز للمسح');
            const qrInput = document.getElementById('qrCodeInput');
            if (qrInput) qrInput.focus();
        }, 2000);
    } finally {
        // Release lock after completion
        delete window.qrProcessing[searchKey];
    }
}


// Keep barcode function for compatibility
function quickBarcode(code) {
   
    simpleQRSearch(code);
}



// Debug function to get all products and their QR codes
async function debugAllProducts() {
    console.log('🔍 Fetching all products for debugging...');
    
    try {
        const response = await fetch('/Cashier/GetAllProductsDebug');
        const result = await response.json();
        
        if (result.success) {
            
            console.table(result.products);
            
            // Show products with QR codes
            const withQR = result.products.filter(p => p.qrCode && p.qrCode.trim() !== '');
          
            console.table(withQR);
            
            // Show products without QR codes
            const withoutQR = result.products.filter(p => !p.qrCode || p.qrCode.trim() === '');
          
            console.table(withoutQR);
            
            return result.products;
        } else {
          
            return [];
        }
    } catch (error) {
        console.error('❌ Error fetching products:', error);
        return [];
    }
}

// Test QR search with a specific code
async function testQRSearch(qrCode) {
   
    
    try {
        // Test exact search
      
        const exactResult = await searchProducts(qrCode, { searchMode: 'exact', includeOutOfStock: false });
       
        
        // Test standard search
       
        const standardResult = await searchProducts(qrCode, { searchMode: 'standard', includeOutOfStock: false });
       
        
        // Test with out of stock included
       
        const withOutOfStock = await searchProducts(qrCode, { searchMode: 'standard', includeOutOfStock: true });
      
        
        // Direct API call test
      
        const response = await fetch(`/Cashier/SearchProducts?term=${encodeURIComponent(qrCode)}&includeOutOfStock=true`);
        const apiResult = await response.json();
     
        
        return {
            exact: exactResult,
            standard: standardResult,
            withOutOfStock: withOutOfStock,
            directAPI: apiResult
        };
        
    } catch (error) {
    
        return null;
    }
}

// Update scanner statistics
function updateScannerStats(success = true) {
    try {
        // Update last scan time
        const now = new Date();
        const timeString = now.toLocaleTimeString('ar-EG', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        const lastScanElement = document.getElementById('lastScanTime');
        if (lastScanElement) {
            lastScanElement.textContent = timeString;
            lastScanElement.style.color = success ? '#28a745' : '#dc3545';
        }
        
        // Update daily scan count
        const dailyScansElement = document.getElementById('dailyScans');
        if (dailyScansElement) {
            let currentCount = parseInt(dailyScansElement.textContent) || 0;
            if (success) {
                currentCount++;
                dailyScansElement.textContent = currentCount;
                dailyScansElement.style.color = '#007bff';
                
                // Add animation for new scan
                dailyScansElement.style.transform = 'scale(1.3)';
                setTimeout(() => {
                    dailyScansElement.style.transform = 'scale(1)';
                }, 200);
            }
        }
        
        // Store stats in localStorage
        const today = now.toDateString();
        const statsKey = `scannerStats_${today}`;
        const stats = JSON.parse(localStorage.getItem(statsKey) || '{"total": 0, "successful": 0}');
        
        stats.total++;
        if (success) {
            stats.successful++;
        }
        
        localStorage.setItem(statsKey, JSON.stringify(stats));
        
    } catch (error) {
        console.error('❌ Error updating scanner stats:', error);
    }
}

// Initialize scanner statistics display
function initializeScannerStats() {
    try {
        const today = new Date().toDateString();
        const statsKey = `scannerStats_${today}`;
        const stats = JSON.parse(localStorage.getItem(statsKey) || '{"total": 0, "successful": 0}');
        
        const dailyScansElement = document.getElementById('dailyScans');
        if (dailyScansElement) {
            dailyScansElement.textContent = stats.successful || 0;
        }
        
    
        
    } catch (error) {
        console.error('❌ Error initializing scanner stats:', error);
    }
}

// Force show QR mode and ensure all elements are visible
function forceShowQRMode() {
    console.log('🔧 Force showing QR mode...');
    
    try {
        // Ensure QR mode is visible
        const qrScannerMode = document.getElementById('qrScannerMode');
        if (qrScannerMode) {
            qrScannerMode.style.display = 'block';
            qrScannerMode.style.visibility = 'visible';
            qrScannerMode.style.opacity = '1';
            console.log('✅ QR Scanner mode forced visible');
        }
        
        // Ensure QR tab button is active
        const qrModeBtn = document.getElementById('qrModeBtn');
        if (qrModeBtn) {
            qrModeBtn.classList.add('active');
            console.log('✅ QR Mode button activated');
        }
        
        // Ensure QR input is visible
        const qrInput = document.getElementById('qrCodeInput');
        if (qrInput) {
            qrInput.style.display = 'block';
            qrInput.style.visibility = 'visible';
            console.log('✅ QR Input forced visible');
        }
        
        // Hide other search modes
        const nameSearchMode = document.getElementById('nameSearchMode');
        const advancedSearchMode = document.getElementById('advancedSearchMode');
        
        if (nameSearchMode) {
            nameSearchMode.style.display = 'none';
        }
        if (advancedSearchMode) {
            advancedSearchMode.style.display = 'none';
        }
        
        // Update current search mode
        currentSearchMode = 'qr';
        
   
        
    } catch (error) {
        console.error('❌ Error forcing QR mode display:', error);
    }
}

// Check if user is interacting with customer or transaction elements
function isUserInteractingWithOtherElements() {
    const activeElement = document.activeElement;
    if (!activeElement) return false;
    
    // Check if user is working with customer fields
    const customerElements = [
        'customerPhone', 'customerName', 'customerAddress', 'customerNotes',
        'originalInvoiceNumber', 'reasonSelect'
    ];
    
    if (customerElements.includes(activeElement.id)) {
        return true;
    }
    
    // Check if user is working with cart or transaction elements
    const transactionElements = ['cartItems', 'processTransactionBtn'];
    if (transactionElements.some(id => activeElement.id === id || activeElement.closest(`#${id}`))) {
        return true;
    }
    
    // Check if user is typing in any input field
    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'SELECT') {
        return true;
    }
    
    return false;
}

// Monitor QR mode visibility and fix if needed (less aggressive)
function startQRVisibilityMonitor() {
    // Only start one monitor
    if (window.qrVisibilityMonitor) {
        clearInterval(window.qrVisibilityMonitor);
    }
    
    window.qrVisibilityMonitor = setInterval(() => {
        if (currentSearchMode === 'qr' && !isUserInteractingWithOtherElements()) {
            const qrScannerMode = document.getElementById('qrScannerMode');
            
            // Only check if QR mode should be visible but isn't (less aggressive)
            if (qrScannerMode && qrScannerMode.style.display === 'none') {
               
                qrScannerMode.style.display = 'block';
                qrScannerMode.style.visibility = 'visible';
            }
        }
    }, 10000); // Check every 10 seconds (much less frequent)
    
  
}

// Manual fix for QR display issues
function fixQRDisplay() {
  
    
    try {
        // Force clear any CSS hiding
        const qrScannerMode = document.getElementById('qrScannerMode');
        const qrInput = document.getElementById('qrCodeInput');
        const qrStatus = document.getElementById('qrStatus');
        const clearBtn = document.getElementById('clearQRBtn');
        
        // Reset all QR elements
        [qrScannerMode, qrInput, qrStatus, clearBtn].forEach(element => {
            if (element) {
                element.style.display = 'block';
                element.style.visibility = 'visible';
                element.style.opacity = '1';
                element.style.position = '';
                element.style.left = '';
                element.style.top = '';
                element.style.transform = '';
            }
        });
        
        // Force QR mode
        forceShowQRMode();
        
        // Reinitialize if needed
        if (qrInput && !qrInput.hasAttribute('data-qr-initialized')) {
            initializeQRMode();
        }
        
        // Focus the input
        if (qrInput) {
            qrInput.focus();
        }
        
        showMessage('تم إصلاح عرض نظام QR بنجاح', 'success');
        console.log('✅ QR display manually fixed');
        
    } catch (error) {
       
        showMessage('خطأ في إصلاح عرض QR', 'error');
    }
}

// Disable QR forcing for better user experience
function disableQRForcing() {
   
    
    try {
        // Stop the visibility monitor
        if (window.qrVisibilityMonitor) {
            clearInterval(window.qrVisibilityMonitor);
            window.qrVisibilityMonitor = null;
          
        }
        
        // Remove aggressive focus handling
        const qrInput = document.getElementById('qrCodeInput');
        if (qrInput) {
            qrInput.onblur = null; // Remove aggressive refocus
           
        }
        
        // Allow user to interact freely
        currentSearchMode = null; // Temporarily disable mode forcing
        
        showMessage('تم إيقاف إجبار وضع QR - يمكنك الآن التفاعل مع باقي الصفحة بحرية', 'info');
      
        
    } catch (error) {
        console.error('❌ Error disabling QR forcing:', error);
        showMessage('خطأ في إيقاف إجبار QR', 'error');
    }
}

// Update QR scanner status
function updateQRStatus(status, message) {
    const qrStatus = document.getElementById('qrStatus');
    if (!qrStatus) return;
    
    // Remove existing classes
    qrStatus.className = `status-${status}`;
    
    // Update content
    let icon = '';
    switch (status) {
        case 'loading':
            icon = '<i class="fas fa-circle-notch fa-spin"></i>';
            break;
        case 'success':
            icon = '<i class="fas fa-check-circle"></i>';
            break;
        case 'error':
            icon = '<i class="fas fa-exclamation-circle"></i>';
            break;
        case 'ready':
        default:
            icon = '<i class="fas fa-qrcode"></i>';
            break;
    }
    
    qrStatus.innerHTML = `${icon} <span class="status-text">${message}</span>`;
}

// Clear QR input
function clearQRInput() {
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput) {
        qrInput.value = '';
        qrInput.focus();
    }
    updateQRStatus('ready', 'جاهز للمسح');
}

// Advanced search with filters
async function performAdvancedSearch() {
    console.log('🔧 Performing advanced search...');
    
    // Get filter values (implement based on your form)
    const filters = {
        term: document.getElementById('advancedSearchTerm')?.value || '',
        category: document.getElementById('categoryFilter')?.value || '',
        color: document.getElementById('colorFilter')?.value || '',
        size: document.getElementById('sizeFilter')?.value || '',
        minPrice: parseFloat(document.getElementById('minPriceFilter')?.value) || null,
        maxPrice: parseFloat(document.getElementById('maxPriceFilter')?.value) || null,
        includeOutOfStock: document.getElementById('includeOutOfStock')?.checked || true,
        searchMode: document.getElementById('searchMode')?.value || 'standard'
    };
    
    try {
        const result = await searchProducts(filters.term, filters);
        
        if (result.success) {
            displayAdvancedSearchResults(result.products, result.searchInfo);
        } else {
            showMessage('❌ فشل البحث المتقدم', 'error');
        }
    } catch (error) {
        console.error('❌ Advanced search error:', error);
        showMessage('❌ خطأ في البحث المتقدم', 'error');
    }
}

// Display advanced search results
function displayAdvancedSearchResults(products, searchInfo) {
   
    
    // Implementation depends on your UI structure
    // This is a basic template
    
    const resultsContainer = document.getElementById('advancedSearchResults');
    if (!resultsContainer) return;
    
    let html = `
        <div class="search-results-header">
            <h5>📊 نتائج البحث (${products.length})</h5>
            ${searchInfo.hasMoreResults ? '<small class="text-muted">يوجد نتائج إضافية...</small>' : ''}
        </div>
        <div class="search-results-grid">
    `;
    
    products.forEach(product => {
        html += `
            <div class="product-card ${product.isAvailable ? 'available' : 'unavailable'}">
                <div class="product-header">
                    <h6 class="product-name">${escapeHtml(product.name)}</h6>
                    <span class="stock-badge ${product.isAvailable ? 'badge-success' : 'badge-danger'}">
                        ${product.stockStatus}
                    </span>
                </div>
                <div class="product-body">
                    <div class="price">💰 ${product.price.toFixed(2)} جنيه</div>
                    <div class="quantity">📦 الكمية: ${product.quantity}</div>
                    ${product.category ? `<div class="category">📁 ${escapeHtml(product.category)}</div>` : ''}
                    ${product.color ? `<div class="color">🎨 ${escapeHtml(product.color)}</div>` : ''}
                </div>
                <div class="product-actions">
                    ${product.isAvailable ? `
                        <button type="button" class="btn btn-primary btn-sm w-100" 
                                onclick="addProductToCart(${product.id}, '${escapeHtml(product.name)}', ${product.price}, '${product.color || ''}', '${product.size || ''}')">
                            <i class="fas fa-plus"></i> إضافة للسلة
                        </button>
                    ` : `
                        <button type="button" class="btn btn-secondary btn-sm w-100" disabled>
                            <i class="fas fa-ban"></i> غير متوفر
                        </button>
                    `}
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    resultsContainer.innerHTML = html;
}

// Test manual quantity update
function testManualUpdate(productName) {
  
    
    fetch(`/Cashier/SearchProducts?term=${encodeURIComponent(productName)}`)
        .then(response => response.json())
        .then(products => {
            if (products && products.length > 0) {
                const product = products[0];
                const newQuantity = prompt(`📦 المنتج: ${product.name}\n🔢 الكمية الحالية: ${product.quantity}\n\nأدخل الكمية الجديدة:`, product.quantity + 5);
                
                if (newQuantity !== null && !isNaN(newQuantity)) {
                    // Send update request
                    return fetch('/Cashier/UpdateProductQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `productId=${product.id}&newQuantity=${newQuantity}&reason=Manual Test Update`
                    });
                }
            } else {
                alert('❌ لم يتم العثور على المنتج');
            }
        })
        .then(response => response?.json())
        .then(result => {
            if (result) {
                
                if (result.success) {
                    alert(`✅ تم التحديث بنجاح!\n📦 المنتج: ${result.productName}\n🔢 الكمية القديمة: ${result.oldQuantity}\n🔢 الكمية الجديدة: ${result.newQuantity}\n💾 SaveResult: ${result.saveResult}`);
                } else {
                    alert(`❌ فشل التحديث: ${result.message}`);
                }
            }
        })
        .catch(error => {
            console.error('❌ Error in manual update:', error);
            alert('❌ خطأ في التحديث اليدوي');
        });
}



// ===============================================
// Mode Management
// ===============================================

// Legacy switchMode function - REMOVED
// This function has been removed as the mode selection section was removed from the UI

// Update mode status indicator
function updateModeStatus(modeInfo) {
    const statusIndicator = document.getElementById('modeStatusIndicator');
    const statusText = document.getElementById('modeStatusText');
    
    if (statusIndicator && statusText) {
        // Remove all alert classes
        statusIndicator.className = 'alert';
        
        // Add appropriate alert class based on mode
        statusIndicator.classList.add(`alert-${modeInfo.color}`);
        
        // Update text with mode information
        statusText.innerHTML = `
            ${modeInfo.icon} <strong>${modeInfo.name}</strong>: ${modeInfo.description}
        `;
        
        // Update icon
        const icon = statusIndicator.querySelector('i');
        if (icon) {
            icon.className = `fas fa-${getStatusIconName(modeInfo.color)} me-2`;
        }
    }
}

// Get status icon name based on color
function getStatusIconName(color) {
    const iconMap = {
        'success': 'check-circle',
        'warning': 'exclamation-triangle',
        'info': 'info-circle',
        'danger': 'times-circle'
    };
    return iconMap[color] || 'info-circle';
}

// Update cart title based on mode
function updateCartTitle(mode) {
    const cartTitle = document.getElementById('cartTitle');
    if (cartTitle) {
        const cartTitles = {
            'sale': '🛒 سلة المشتريات',
            'exchange': '🔄 سلة الاستبدال',
            'return': '↩️ سلة الإرجاع'
        };
        
        cartTitle.textContent = cartTitles[mode] || '🛒 سلة المشتريات';
    }
}

// Update mode button visual states
function updateModeButtons(activeMode) {
    try {
        // Remove active class from all mode buttons
        document.querySelectorAll('.mode-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // Add active class to current mode button
        const targetBtn = document.getElementById(activeMode + 'ModeBtn');
        if (targetBtn) {
            targetBtn.classList.add('active');
        } else {
            console.warn('Button not found:', activeMode + 'ModeBtn');
        }
    } catch (error) {
        console.error('Error updating mode buttons:', error);
    }
}

// Enhanced show/hide exchange and return specific fields with animation
function toggleExchangeReturnFields(mode) {
    try {
        const fieldsDiv = document.getElementById('exchangeReturnFields');
        if (fieldsDiv) {
            if (mode === 'exchange' || mode === 'return') {
                // Show fields with animation
                fieldsDiv.style.display = 'block';
                fieldsDiv.classList.add('active');
                
                // Focus on invoice number field
                setTimeout(() => {
                    const invoiceInput = document.getElementById('originalInvoiceNumber');
                    if (invoiceInput) {
                        invoiceInput.focus();
                    }
                }, 300);
                
               
            } else {
                // Hide fields
                fieldsDiv.classList.remove('active');
                setTimeout(() => {
                    fieldsDiv.style.display = 'none';
                }, 300);
                
                // Clear fields when hiding
                clearExchangeReturnFields();
                
               
            }
        } else {
            console.warn('⚠️ exchangeReturnFields element not found');
        }
    } catch (error) {
        console.error('❌ Error toggling exchange/return fields:', error);
    }
}

// Clear exchange/return specific fields
function clearExchangeReturnFields() {
    try {
        const fieldsToClean = [
            'originalInvoiceNumber',
            'reasonSelect'
        ];
        
        fieldsToClean.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.value = '';
                field.classList.remove('is-valid', 'is-invalid');
            }
        });
        
        // Clear checkboxes
        const checkboxes = [
            'includeShippingRefund',
            'exchangeWithDifference'
        ];
        
        checkboxes.forEach(checkboxId => {
            const checkbox = document.getElementById(checkboxId);
            if (checkbox) {
                checkbox.checked = false;
            }
        });
        
        // Clear search results
        clearInvoiceSearchResults();
        
       
    } catch (error) {
        console.error('❌ Error clearing exchange/return fields:', error);
    }
}

// Clear invoice search results
function clearInvoiceSearchResults() {
    const searchResult = document.getElementById('invoiceSearchResult');
    if (searchResult) {
        searchResult.style.display = 'none';
        searchResult.innerHTML = '';
    }
}

// ===============================================
// Search Mode Management
// ===============================================

// Switch search modes (QR, name, advanced)
function switchSearchMode(mode) {
  
    
    // Prevent switching to same mode
    if (currentSearchMode === mode) {
       
        return;
    }
    
    const searchModes = {
        'qr': 'مسح QR Code',
        'name': 'البحث بالاسم'
    };
    
    currentSearchMode = mode;
    
    // Clear any existing initialization flags for clean restart
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput && mode !== 'qr') {
        qrInput.removeAttribute('data-qr-initialized');
        qrInput.removeAttribute('data-scanner-initialized');
    }
    
    // Hide all search mode containers
    document.querySelectorAll('.search-mode').forEach(modeDiv => {
        modeDiv.style.display = 'none';
    });
    
    // Show the selected mode with force visibility
    const modeIds = {
        'qr': 'qrScannerMode',
        'name': 'nameSearchMode'
    };
    
    const targetMode = document.getElementById(modeIds[mode]);
   
    
    if (targetMode) {
        targetMode.style.display = 'block';
        targetMode.style.visibility = 'visible';
        targetMode.style.opacity = '1';
       
        
        // Special handling for QR mode
        if (mode === 'qr') {
            // Ensure all QR elements are visible
            const qrInput = document.getElementById('qrCodeInput');
            const qrStatus = document.getElementById('qrStatus');
            const clearBtn = document.getElementById('clearQRBtn');
            
            if (qrInput) {
                qrInput.style.display = 'block';
                qrInput.style.visibility = 'visible';
            }
            if (qrStatus) {
                qrStatus.style.display = 'block';
                qrStatus.style.visibility = 'visible';
            }
            if (clearBtn) {
                clearBtn.style.display = 'block';
                clearBtn.style.visibility = 'visible';
            }
        }
    } else {
        console.error(`❌ Could not find mode element: ${modeIds[mode]}`);
    }
    
    // Update search tab buttons
    updateSearchTabButtons(mode);
    
    // Initialize mode-specific features with delay to ensure DOM is ready
    setTimeout(() => {
        initializeSearchMode(mode);
    }, 100);
    
    showMessage(`تم التبديل إلى: ${searchModes[mode] || mode}`, 'info');
}

// Update search tab button states
function updateSearchTabButtons(activeMode) {
    try {
        document.querySelectorAll('.search-tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const targetBtn = document.getElementById(activeMode + 'ModeBtn');
        if (targetBtn) {
            targetBtn.classList.add('active');
        }
    } catch (error) {
        console.error('Error updating search tab buttons:', error);
    }
}

// Initialize mode-specific features
function initializeSearchMode(mode) {
   
    
    switch (mode) {
        case 'qr':
            initializeQRMode();
            break;
        case 'name':
            initializeNameSearchMode();
            break;
        case 'advanced':
            initializeAdvancedSearchMode();
            break;
    }
}

// Initialize QR scanning mode for scanner devices
function initializeQRMode() {
    const qrInput = document.getElementById('qrCodeInput');
    if (qrInput && !qrInput.hasAttribute('data-qr-initialized')) {
        // Mark as initialized to prevent duplicate setup
        qrInput.setAttribute('data-qr-initialized', 'true');
        
        // Keep focus on input for scanner devices
        qrInput.focus();
        
        // Prevent focus loss (only when user isn't working elsewhere)
        qrInput.onblur = function() {
            setTimeout(() => {
                // Only refocus if user isn't interacting with other important elements
                if (currentSearchMode === 'qr' && !isUserInteractingWithOtherElements()) {
                    this.focus();
                }
            }, 100);
        };
        
        // Handle scanner input (most scanners send data followed by Enter)
        qrInput.onkeydown = function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const qrCode = this.value.trim();
                if (qrCode) {
                    processScannerInput(qrCode);
                    this.value = ''; // Clear immediately for next scan
                }
                return false;
            }
        };
        
        // Handle paste events (some scanners use clipboard)
        qrInput.onpaste = function(e) {
            e.preventDefault();
            const pastedData = (e.clipboardData || window.clipboardData).getData('text');
            if (pastedData && pastedData.trim()) {
                processScannerInput(pastedData.trim());
                this.value = '';
            }
        };
        
        // Auto-detect scanner input patterns
        let scanBuffer = '';
        let scanTimeout = null;
        
        qrInput.oninput = function() {
            const currentValue = this.value;
            
            // Clear any existing timeout
            if (scanTimeout) {
                clearTimeout(scanTimeout);
            }
            
            // If input is fast (scanner-like), accumulate
            if (currentValue.length > scanBuffer.length + 3) {
                // Fast input detected - likely scanner
                scanBuffer = currentValue;
                
                // Process after short delay to ensure complete scan
                scanTimeout = setTimeout(() => {
                    if (this.value === scanBuffer && scanBuffer.length >= 6) {
                        processScannerInput(scanBuffer);
                        this.value = '';
                        scanBuffer = '';
                    }
                }, 100);
            } else {
                // Normal typing - update buffer
                scanBuffer = currentValue;
                
                // If manually typed and looks complete, process after longer delay
                if (currentValue.length >= 8) {
                    scanTimeout = setTimeout(() => {
                        if (this.value === currentValue && currentValue.length >= 8) {
                            processScannerInput(currentValue);
                            this.value = '';
                        }
                    }, 1000);
                }
            }
        };
        
        // Keep input active and ready (only if not already set) - with user interaction check
        if (!qrInput.hasAttribute('data-scanner-initialized')) {
            qrInput.setAttribute('data-scanner-initialized', 'true');
            
            setInterval(() => {
                // Only refocus if user is not actively interacting with other elements
                if (currentSearchMode === 'qr' && 
                    document.activeElement !== qrInput && 
                    !isUserInteractingWithOtherElements()) {
                    qrInput.focus();
                }
            }, 5000); // Increased frequency to allow more user interaction
        }
        
        // Initialize scanner statistics (only once)
        if (!qrInput.hasAttribute('data-stats-initialized')) {
            qrInput.setAttribute('data-stats-initialized', 'true');
            initializeScannerStats();
        }
        
        // Start visibility monitor (passive mode)
        startQRVisibilityMonitor();
        
      
    } else if (qrInput) {
        // Already initialized, just ensure visibility (don't force focus)
        const qrScannerMode = document.getElementById('qrScannerMode');
        if (qrScannerMode && qrScannerMode.style.display === 'none') {
            qrScannerMode.style.display = 'block';
        }
      
    }
}

// Initialize name search mode with live search
function initializeNameSearchMode() {
    const nameInput = document.getElementById('productNameInput');
    const resultsContainer = document.getElementById('nameSearchResults');
    
    if (nameInput && resultsContainer) {
        nameInput.focus();
        
        // Initialize live search
        initializeLiveSearch(nameInput, resultsContainer, function(productId, productName, productPrice, productColor, productSize) {
            // Add selected product to cart
            addProductToCart(productId, productName, productPrice, productColor, productSize);
        });
        
       
    }
}

// Initialize advanced search mode
function initializeAdvancedSearchMode() {
   
    
    // Load categories for filter
    loadSearchFilters();
    
    // Add event listeners for real-time search
    const advancedTerm = document.getElementById('advancedSearchTerm');
    if (advancedTerm) {
        advancedTerm.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performAdvancedSearch();
            }
        });
    }
    
 
}

// Load search filters (categories, colors, etc.)
async function loadSearchFilters() {
    try {
        const response = await fetch('/Cashier/GetCategories');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.categories) {
            // Populate category filter
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) {
                categoryFilter.innerHTML = '<option value="">جميع الأصناف</option>';
                data.categories.forEach(category => {
                    categoryFilter.innerHTML += `<option value="${category}">🏷️ ${category}</option>`;
                });
            }
            
          
        } else {
          
        }
    } catch (error) {
    
        
        // Fallback - use default categories
        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            categoryFilter.innerHTML = `
                <option value="">جميع الأصناف</option>
                <option value="ملابس">👕 ملابس</option>
                <option value="أحذية">👟 أحذية</option>
                <option value="إكسسوارات">💍 إكسسوارات</option>
                <option value="حقائب">👜 حقائب</option>
                <option value="عطور">🌸 عطور</option>
                <option value="أخرى">📦 أخرى</option>
            `;
        }
    }
}

// Clear product name search
function clearProductNameSearch() {
    const nameInput = document.getElementById('productNameInput');
    const resultsContainer = document.getElementById('nameSearchResults');
    
    if (nameInput) {
        nameInput.value = '';
        nameInput.focus();
    }
    
    if (resultsContainer) {
        resultsContainer.style.display = 'none';
        resultsContainer.innerHTML = '';
    }
}

// Show popular products
async function showPopularProducts() {
    try {
      
        
        // Get recent/popular products (no search term = recent products)
        const result = await searchProducts('', { 
            includeOutOfStock: false, 
            limit: 10 
        });
        
        if (result.success && result.products.length > 0) {
            const resultsContainer = document.getElementById('nameSearchResults');
            if (resultsContainer) {
                displaySearchResults(result.products, resultsContainer, function(productId, productName, productPrice) {
                    addProductToCart(productId, productName, productPrice);
                });
                resultsContainer.style.display = 'block';
            }
            
            showMessage(`🔥 تم عرض ${result.products.length} من المنتجات الشائعة`, 'success');
        } else {
            showMessage('❌ لا توجد منتجات شائعة متاحة', 'warning');
        }
    } catch (error) {
      
        showMessage('❌ خطأ في تحميل المنتجات الشائعة', 'error');
    }
}

// Clear advanced search filters
function clearAdvancedFilters() {
    // Clear all input fields
    document.getElementById('advancedSearchTerm').value = '';
    document.getElementById('categoryFilter').value = '';
    document.getElementById('colorFilter').value = '';
    document.getElementById('minPriceFilter').value = '';
    document.getElementById('maxPriceFilter').value = '';
    document.getElementById('includeOutOfStock').checked = true;
    document.getElementById('searchMode').value = 'standard';
    
    // Clear results
    const resultsContainer = document.getElementById('advancedSearchResults');
    if (resultsContainer) {
        resultsContainer.innerHTML = '';
    }
    
    showMessage('🧹 تم مسح جميع الفلاتر', 'info');
}

// ===============================================
// Cart Management
// ===============================================

// Clear shopping cart
function clearCart() {
    if (confirm('هل أنت متأكد من حذف جميع المنتجات من السلة؟')) {
        const previousCount = cart.length;
        cart = [];
        
        showMessage('تم مسح السلة بنجاح', 'success');
    
        
        // Update cart display if function exists
        if (typeof updateCartDisplay === 'function') {
            updateCartDisplay();
        }
        
        // Update cart summary if function exists
        if (typeof updateCartSummary === 'function') {
            updateCartSummary();
        }
    }
}

// Add item to cart
function addToCart(product, quantity = 1) {
    try {
        if (!product || !product.id) {
           
            return;
        }
        
        const existingItem = cart.find(item => item.id === product.id);
        
        if (existingItem) {
            existingItem.quantity += quantity;
            
            // Recalculate total with discount
            const itemSubTotal = Math.abs(existingItem.price * existingItem.quantity);
            const discountAmount = existingItem.discount || 0; // Direct amount
            existingItem.total = Math.round((itemSubTotal - discountAmount) * 100) / 100;
            
         
        } else {
            cart.push({
                id: product.id,
                name: product.name,
                price: product.price,
                quantity: quantity,
                stock: product.stock || 0,
                total: Math.round((product.price * quantity) * 100) / 100, // Round to 2 decimal places
                discount: 0
            });
           
        }
        
        alert(`✅ تم إضافة ${product.name} إلى السلة`);
        
    } catch (error) {
        console.error('Error adding to cart:', error);
        alert('❌ حدث خطأ في إضافة المنتج');
    }
}

// ===============================================
// Customer Management
// ===============================================

// Search customer by phone number
async function searchCustomerByPhone() {
    try {
        const phoneInput = document.getElementById('customerPhone');
        if (!phoneInput) {
            console.error('customerPhone input not found');
            showMessage('❌ حقل رقم الهاتف غير موجود', 'error');
            return;
        }
        
        const phone = phoneInput.value.trim();
        if (!phone) {
            showMessage('❌ رجاء ادخال رقم الهاتف', 'error');
            phoneInput.focus();
            return;
        }
        
        // Basic phone validation - just check if it's not empty
        if (phone.length < 7) {
            showMessage('❌ رقم الهاتف يجب أن يكون 7 أرقام على الأقل', 'error');
            phoneInput.focus();
            return;
        }
        
        // Show loading state
        const searchBtn = document.getElementById('searchCustomerBtn');
        
        searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> بحث...';
        searchBtn.disabled = true;
        
        // Show loading in phone input
        if (phoneInput) {
            phoneInput.placeholder = 'جاري البحث...';
            phoneInput.disabled = true;
        }
        
        showMessage(`🔍 جاري البحث عن العميل: ${phone}`, 'info');
        console.log('Searching for customer with phone:', phone);
        
        // Make AJAX call to search for the customer
        const response = await fetch(`/Cashier/SearchCustomerByPhone?phone=${encodeURIComponent(phone)}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            // Customer found - fill the form
            const customer = data.customer;
            fillCustomerDataFromSearch(customer);
            
            // Update customer select dropdown
            updateCustomerSelect(customer);
            
            showMessage(`✅ تم العثور على العميل: ${customer.name}`, 'success');
            updateCustomerStatus(`✅ تم تحديد العميل: ${customer.name}`, 'success');
            animateCustomerFilled();
            
           
        } else {
            // Customer not found
            showMessage(data.message || 'لم يتم العثور على عميل بهذا الرقم', 'warning');
            updateCustomerStatus('لم يتم العثور على عميل', 'warning');
            
        }
        
    } catch (error) {
        console.error('Error in searchCustomerByPhone:', error);
        showMessage('❌ حدث خطأ في البحث عن العميل', 'error');
        updateCustomerStatus('خطأ في البحث', 'error');
    } finally {
        // Reset button state
        const searchBtn = document.getElementById('searchCustomerBtn');
        searchBtn.innerHTML = '<i class="fas fa-search"></i> بحث';
        searchBtn.disabled = false;
        
        // Reset phone input state
        if (phoneInput) {
            phoneInput.placeholder = '01xxxxxxxxx';
            phoneInput.disabled = false;
        }
    }
}

// ===============================================
// QR Scanner
// ===============================================


// ===============================================
// Transaction Processing
// ===============================================

// Process transaction (main action)
async function processTransaction() {
    try {
       
        
        // Enhanced validation
        if (!cart || !Array.isArray(cart) || cart.length === 0) {
            console.error('❌ Cart validation failed:', {
                cart: cart,
                isArray: Array.isArray(cart),
                length: cart ? cart.length : 'undefined'
            });
            alert('❌ السلة فارغة! يرجى إضافة منتجات أولاً');
            return;
        }
        
      
        
        // Check customer selection or new customer data
        const collectedCustomerData = collectCustomerData();
        const hasSelectedCustomer = collectedCustomerData.customerId && collectedCustomerData.customerId !== '0';
        const hasNewCustomerData = collectedCustomerData.name.trim() && collectedCustomerData.phone.trim();
        
       
        
        // Check if return items exist and original invoice is needed
        const hasReturnItems = cart.some(item => item.quantity < 0);
        if (hasReturnItems) {
            const originalInvoiceInput = document.getElementById('originalInvoiceNumber');
            // Original invoice is optional in the new system
            if (originalInvoiceInput && originalInvoiceInput.value.trim()) {
               
            } else {
               
            }
        }
        
       
        
        // Collect customer data
        const finalCustomerData = collectCustomerData();
      
        
        // Prepare transaction data
        const transactionData = prepareTransactionData(finalCustomerData);
     
        
        // Check if prepareTransactionData returned null
        if (!transactionData) {
           
            return;
        }
        
        // Check for duplicate numbers before sending
        const invoiceNumber = document.getElementById('invoiceNumber')?.value?.trim();
        const orderNumber = document.getElementById('orderNumber')?.value?.trim();
        
        if (invoiceNumber) {
            const invoiceCheck = await checkInvoiceNumberDuplicate(invoiceNumber);
            if (invoiceCheck && invoiceCheck.exists) {
                alert('❌ رقم الفاتورة مستخدم بالفعل! يرجى استخدام رقم آخر');
                return;
            }
        }
        
        if (orderNumber) {
            const orderCheck = await checkOrderNumberDuplicate(orderNumber);
            if (orderCheck && orderCheck.exists) {
                alert('❌ رقم الأمر مستخدم بالفعل! يرجى استخدام رقم آخر');
                return;
            }
        }
        
        // Send to server using the prepared transaction data
        
        
        // Show transaction summary before sending
        const grandTotal = getCartGrandTotal();
        const amountPaid = Math.round(parseFloat(document.getElementById('amountPaid')?.value || 0) * 100) / 100;
        const remaining = grandTotal - amountPaid;
        
        console.log('💰 Transaction Summary:', {
            grandTotal: grandTotal.toFixed(2),
            amountPaid: amountPaid.toFixed(2),
            remaining: remaining.toFixed(2),
            items: cart.map(item => ({
                name: item.name,
                quantity: item.quantity,
                price: item.price,
                discount: item.discount || 0,
                total: Math.abs(item.total || (item.price * item.quantity)).toFixed(2),
                mode: item.quantity < 0 ? 'return' : 'sale'
            }))
        });
        
        // Show user-friendly summary
        if (remaining > 0) {
            showMessage(`💰 إجمالي الفاتورة: ${grandTotal.toFixed(2)} ج.م | المدفوع: ${amountPaid.toFixed(2)} ج.م | المتبقي: ${remaining.toFixed(2)} ج.م`, 'info');
        } else if (remaining < 0) {
            showMessage(`💰 إجمالي الفاتورة: ${grandTotal.toFixed(2)} ج.م | المدفوع: ${amountPaid.toFixed(2)} ج.م | الباقي: ${Math.abs(remaining).toFixed(2)} ج.م`, 'success');
        } else {
            showMessage(`✅ إجمالي الفاتورة: ${grandTotal.toFixed(2)} ج.م | تم الدفع بالكامل`, 'success');
        }
        
        // Log detailed calculation for debugging
        console.log('🔍 Detailed calculation for transaction:', {
            cartItems: cart.length,
            saleItems: cart.filter(item => item.quantity > 0).length,
            returnItems: cart.filter(item => item.quantity < 0).length,
            totalDiscount: cart.reduce((sum, item) => sum + (item.discount || 0), 0).toFixed(2)
        });
        
        sendTransactionToServer(transactionData);
        
    } catch (error) {
        console.error('Error in processTransaction:', error);
        alert('❌ حدث خطأ في معالجة المعاملة');
    }
}

// Collect customer data from form
function collectCustomerData() {
    const customerSelect = document.getElementById('customerSelect');
    const customerName = document.getElementById('customerName');
    
    // Try multiple phone field IDs (customerPhone for search, customerPhoneInput for new customer)
    const customerPhone = document.getElementById('customerPhone');
    const customerPhoneInput = document.getElementById('customerPhoneInput');
    const phoneValue = customerPhone?.value || customerPhoneInput?.value || '';
    
    // Get all customer fields
    const customerEmail = document.getElementById('customerEmail');
    const customerAdditionalPhone = document.getElementById('customerAdditionalPhone');
    const customerGovernorate = document.getElementById('customerGovernorate');
    const customerDistrict = document.getElementById('customerDistrict');
    const customerDetailedAddress = document.getElementById('customerDetailedAddress');
    
    const result = {
        customerId: customerSelect?.value || null,
        name: customerName?.value?.trim() || '',
        phone: phoneValue.trim(),
        email: customerEmail?.value?.trim() || '',
        additionalPhone: customerAdditionalPhone?.value?.trim() || '',
        governorate: customerGovernorate?.value || '',
        district: customerDistrict?.value?.trim() || '',
        detailedAddress: customerDetailedAddress?.value?.trim() || '',
        address: customerDetailedAddress?.value?.trim() || ''
    };
    
    console.log('📋 collectCustomerData result:', result);
    return result;
}

// Prepare transaction data for sending to server
function prepareTransactionData(customerData) {
    console.log('🔧 Preparing transaction data...');
    console.log('🛒 Current cart:', cart);
    console.log('🛒 Cart length:', cart.length);
    
    if (!cart || cart.length === 0) {
        console.error('❌ Cart is empty in prepareTransactionData!');
        alert('❌ السلة فارغة! يرجى إضافة منتجات أولاً');
        return null;
    }
    
    // Calculate totals
    let subTotal = 0;
    let totalDiscount = 0;
    
    const items = cart.map(item => {
        // Validate that we have a proper productId (not the cart item id)
        let actualProductId = item.productId;
        
        // If productId looks like a timestamp or matches cart item id, try to find real product ID
        if (!actualProductId || actualProductId === item.id || actualProductId.toString().length > 10) {
            console.warn('⚠️ Suspicious productId for cart item:', item);
            console.warn('⚠️ Will try to use ProductName for server-side lookup');
            // Use a sentinel value that server can detect and handle via ProductName lookup
            actualProductId = 0;
        }
        
        const itemSubTotal = Math.abs(item.price * item.quantity);
        const itemDiscount = item.discount || 0; // Direct amount, not percentage
        const itemTotal = itemSubTotal - itemDiscount;
        
        subTotal += (item.quantity < 0 ? -itemSubTotal : itemSubTotal); // Use subtotal for calculation
        // للإرجاع: لا نرسل الخصم (الخصم الأصلي لا يُعتبر خسارة)
        totalDiscount += (item.quantity < 0 ? 0 : itemDiscount);
        
        return {
            ProductId: actualProductId, // Use the validated/corrected product ID
            ProductName: item.name,
            Color: item.color || null, // Color information
            Size: item.size || null, // Size information
            Quantity: item.quantity, // Keep negative for returns
            Price: item.price,
            Discount: item.discount || 0, // حفظ الخصم كما هو
            Notes: item.notes || null // Optional notes
        };
    });
    
    // Get additional fields (simplified)
    const policyNumber = document.getElementById('policyNumber')?.value || '';
    const invoiceStatus = document.getElementById('invoiceStatus')?.value || 3; // Default to Paid
    const orderOrigin = document.getElementById('orderOrigin')?.value || 7; // Default to PhysicalStore
    const paymentMethod = document.getElementById('paymentMethod')?.value || '';
    const shippingCost = parseFloat(document.getElementById('shippingCost')?.value || 0);
    const shippingType = document.getElementById('shippingType')?.value || null;
    const invoiceNumber = document.getElementById('invoiceNumber')?.value || '';
    const orderNumber = document.getElementById('orderNumber')?.value || '';
    const originalInvoiceNumber = document.getElementById('originalInvoiceNumber')?.value || '';
    const returnNotes = document.getElementById('returnNotes')?.value || '';
    
    // Get the payment amount
    const amountPaidInput = document.getElementById('amountPaid');
    const amountPaid = Math.round(parseFloat(amountPaidInput?.value || 0) * 100) / 100;
    
    // Determine invoice type based on total amount
    const invoiceType = subTotal < 0 ? 2 : 1; // 2 = Return, 1 = Sale
    const finalTotal = subTotal + (subTotal >= 0 ? shippingCost : 0);
    
    const transactionDataResult = {
        // Customer information - matching C# property names exactly
        CustomerId: parseInt(customerData.customerId) || 0,
        CustomerName: customerData.name || '',
        CustomerPhone: customerData.phone || '',
        CustomerEmail: customerData.email || '',
        CustomerAdditionalPhone: customerData.additionalPhone || '',
        CustomerGovernorate: customerData.governorate || '',
        CustomerDistrict: customerData.district || '',
        CustomerDetailedAddress: customerData.detailedAddress || '',
        CustomerAddress: customerData.address || '',
        
        // Transaction details
        Items: items, // Capital I to match C# model
        AmountPaid: amountPaid,
        
        // Invoice information - matching C# property names exactly
        InvoiceNumber: invoiceNumber,
        OrderNumber: orderNumber,
        PolicyNumber: policyNumber,
        InvoiceStatus: parseInt(invoiceStatus) || 3, // Default to Paid
        OrderOrigin: parseInt(orderOrigin) || 7,
        PaymentMethod: paymentMethod,
        ShippingCost: subTotal >= 0 ? shippingCost : 0, // No shipping for returns
        ShippingType: shippingType ? parseInt(shippingType) : null,
        InvoiceType: invoiceType,
        
        // Optional reference and notes - matching C# property names exactly
        OriginalInvoiceNumber: originalInvoiceNumber,
        Notes: returnNotes,
        
        // Cashier information
        CashierName: document.getElementById('cashierName')?.textContent?.trim() || ''
    };
    
    console.log('✅ Transaction data prepared successfully');
    console.log('📊 Final items count:', transactionDataResult.Items.length);
    console.log('📊 Final transaction data:', transactionDataResult);
    
    return transactionDataResult;
}

// Convert mode to invoice type
function getInvoiceTypeFromMode(mode) {
    switch (mode) {
        case 'sale': return 1; // Sale
        case 'exchange': return 2; // Exchange  
        case 'return': return 3; // Return
        default: return 1; // Default to Sale
    }
}

// Get mode name in Arabic
function getModeName(mode) {
    switch (mode) {
        case 'sale': return 'البيع';
        case 'exchange': return 'الاستبدال';
        case 'return': return 'الإرجاع';
        default: return 'المعاملة';
    }
}

// Send transaction to server
function sendTransactionToServer(transactionData) {
    console.log('🚀 Sending transaction to server...');
    console.log('📦 Transaction data being sent:', transactionData);
    
    // Simple validation
    if (!transactionData.Items || transactionData.Items.length === 0) {
        console.error('❌ No items in transaction!');
        alert('❌ خطأ: لا توجد منتجات في المعاملة');
        return;
    }
    
    // Show loading message
    const loadingMessage = '⏳ جاري إرسال البيانات للخادم...';
    showMessage(loadingMessage, 'info');
    
    // Use only the main endpoint
    const endpoint = '/Cashier/ProcessTransaction';
    console.log(`📤 Using endpoint: ${endpoint}`);
    
    // Send POST request
    const jsonData = JSON.stringify(transactionData);
    console.log('📤 JSON being sent to server:', jsonData);
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: jsonData
    })
    .then(response => {
        console.log('📨 Server response status:', response.status);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
    })
    .then(result => {
        console.log('✅ Server response:', result);
        console.log('📊 Result success status:', result.success);
        console.log('📊 Result message:', result.message);
        
        if (result.success) {
            console.log('🎉 Calling handleTransactionSuccess...');
        handleTransactionSuccess(result);
        } else {
            console.log(`❌ ${endpoint} failed with message: ${result.message}`);
            
            handleTransactionError(new Error(result.message || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error(`❌ Transaction failed on ${endpoint}:`, error);
        
        handleTransactionError(error);
    });
}

// Handle successful transaction
function handleTransactionSuccess(result) {
    console.log('🎉 Transaction successful!', result);
    console.log('🎉 handleTransactionSuccess called with:', JSON.stringify(result, null, 2));
    
    // Double check success status
    if (!result.success) {
        console.error('❌ Result shows success=false but passed to success handler');
        handleTransactionError(new Error(result.message || 'Transaction failed'));
        return;
    }
    
    console.log('✅ Success status confirmed, proceeding with transaction completion...');
    
    // Log updated product quantities for verification
    if (result.updatedProducts && result.updatedProducts.length > 0) {
        console.log('📊 Updated Product Quantities:');
        result.updatedProducts.forEach(product => {
            console.log(`   • ${product.productName} (ID: ${product.productId})`);
            console.log(`     └─ New Quantity: ${product.newQuantity} (Change: ${product.quantityChange > 0 ? '+' : ''}${product.quantityChange})`);
        });
    }
    
    // Show enhanced message with return information
    let baseMessage = `✅ تم إنجاز ${getModeName(getCurrentMode())} بنجاح!\nرقم الفاتورة: ${result.invoiceNumber || 'غير متاح'}`;
    
    console.log('📢 Preparing success message:', baseMessage);
    
    // Add return warning if applicable
    if (result.hasReturns && result.returnedItems && result.returnedItems.length > 0) {
        baseMessage += '\n\n⚠️ تم تسجيل مرتجعات:';
        result.returnedItems.forEach(item => {
            baseMessage += `\n• ${item.productName}: ${item.quantity} قطعة`;
        });
        baseMessage += '\n\n🔧 تذكير: قم بتحديث كميات المنتجات المرتجعة يدوياً من صفحة المنتجات';
        console.log('📢 Showing warning message for returns...');
        showMessage(baseMessage, 'warning', 8000); // رسالة أطول
    } else {
        console.log('📢 Showing success message...');
        showMessage(baseMessage, 'success');
    }
    
    // Also show an alert as backup
    alert('✅ تمت المعاملة بنجاح!\n' + (result.message || 'العملية اكتملت'));
    
    // Verify inventory updates for all transactions
    if (result.updatedProducts && result.updatedProducts.length > 0) {
        console.log('🔍 Verifying inventory updates...');
        verifyInventoryUpdatesFromResult(result.updatedProducts);
    }
    
    // Clear cart
    cart = [];
    window.cart = cart;
    
    // Clear number status
    clearInvoiceNumberStatus();
    clearOrderNumberStatus();
    
    updateCartDisplay();
    updateCartSummary();
    
    // Reset form
    resetTransactionForm();
    
    console.log('🧹 Transaction completed and form reset');
}

// Verify inventory updates after return
function verifyInventoryUpdates() {
    console.log('🔍 Starting inventory verification...');
    
    cart.forEach(async (item, index) => {
        if (item.quantity < 0) { // Return item
            try {
                // We need to find the product by name since we don't have productId
                const response = await fetch(`/Cashier/SearchProducts?term=${encodeURIComponent(item.name)}`);
                const products = await response.json();
                
                if (products && products.length > 0) {
                    const product = products.find(p => p.name === item.name);
                    if (product) {
                        console.log(`📦 Product: ${product.name}, Current Quantity: ${product.quantity}, Returned: ${Math.abs(item.quantity)}`);
                        
                        // Show verification message
                        setTimeout(() => {
                            showMessage(`📦 تم التحقق: ${product.name} - الكمية الحالية: ${product.quantity}`, 'info');
                        }, index * 1000);
                    }
                }
            } catch (error) {
                console.error('❌ Error verifying inventory:', error);
            }
        }
    });
}

// Handle transaction error
function handleTransactionError(error) {
    console.error('💥 Transaction error:', error);
    
    let errorMessage = '❌ حدث خطأ في معالجة المعاملة';
    if (error.message) {
        // عرض رسالة الخطأ المحددة مباشرة
        errorMessage = error.message;
    }
    
    showMessage(errorMessage, 'error');
}

// Reset transaction form after completion
function resetTransactionForm() {
    // Reset additional fields
    const fieldsToReset = [
        'policyNumber',
        'invoiceStatus',
        'paymentMethod', 
        'shippingCost',
        'shippingType',
        'invoiceNumber',
        'orderNumber',
        'originalInvoiceNumber',
        'returnReason'
    ];
    
    fieldsToReset.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';
        }
    });
    
    // Reset numbers generation flag
    window.numbersGenerated = false;
    
    // Reset order origin to default
    const orderOrigin = document.getElementById('orderOrigin');
    if (orderOrigin) {
        orderOrigin.value = 'other';
    }
    
    // Clear customer data
    clearCustomerData();
    
    // Return to sale mode
    isReturnMode = false;
    
    // Clear number status
    clearInvoiceNumberStatus();
    clearOrderNumberStatus();
    
    console.log('🔄 Form reset completed');
}

// Verify inventory updates from transaction result
function verifyInventoryUpdatesFromResult(updatedProducts) {
    console.log('🧪 Starting inventory verification...');
    
    // Display verification results
    updatedProducts.forEach(product => {
        const changeType = product.quantityChange > 0 ? 'بيع' : 'إرجاع';
        const changeAmount = Math.abs(product.quantityChange);
        
        console.log(`✅ VERIFIED: ${product.productName}`);
        console.log(`   └─ الكمية الحالية: ${product.newQuantity}`);
        console.log(`   └─ نوع العملية: ${changeType} (${changeAmount} قطعة)`);
        
        // Check if quantities make sense
        if (product.quantityChange > 0 && product.newQuantity >= 0) {
            console.log(`   └─ ✅ بيع صحيح: تم تقليل المخزون`);
        } else if (product.quantityChange < 0 && product.newQuantity >= 0) {
            console.log(`   └─ ✅ إرجاع صحيح: تم زيادة المخزون`);
        } else {
            console.warn(`   └─ ⚠️ تحذير: كمية غير متوقعة`);
        }
    });
    
    console.log('✅ Inventory verification completed');
}

// Manual test function for checking product quantity
async function testProductQuantity(productId) {
    try {
        console.log(`🧪 Testing product quantity for ID: ${productId}`);
        
        const response = await fetch(`/Cashier/GetRealTimeProductInfo?productId=${productId}`);
        const result = await response.json();
        
        if (result.success) {
            console.log('📊 Real-time Product Info:');
            console.log(`   • Name: ${result.product.name}`);
            console.log(`   • Current Quantity: ${result.product.quantity}`);
            console.log(`   • Price: ${result.product.price}`);
            console.log(`   • Category: ${result.product.category || 'N/A'}`);
            
            if (result.recentTransactions && result.recentTransactions.length > 0) {
                console.log('📈 Recent Transactions:');
                result.recentTransactions.forEach((tx, index) => {
                    console.log(`   ${index + 1}. Quantity: ${tx.quantity}, Total: ${tx.totalPrice}, Date: ${new Date(tx.date).toLocaleString()}`);
                });
            }
        } else {
            console.error('❌ Error:', result.message);
        }
    } catch (error) {
        console.error('❌ Test failed:', error);
    }
}

// Export test function to global scope
window.testProductQuantity = testProductQuantity;

// Test cart summary function
function testCartSummary() {
    console.log('🧪 Testing cart summary...');
    
    // Test if summary elements exist
    const summaryElements = ['subtotal', 'totalDiscount', 'grandTotal'];
    summaryElements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`Element ${id}:`, element ? '✅ Found' : '❌ Missing');
    });
    
    // Test manual update
    updateSummaryElement('subtotal', '100.00 ج.م');
    updateSummaryElement('totalDiscount', '10.00 ج.م');
    updateSummaryElement('grandTotal', '90.00 ج.م');
    
    console.log('Cart contents:', cart);
    updateCartSummary();
}

// Export test function
window.testCartSummary = testCartSummary;

// Test all cart functions
function testCartFunctions() {
    console.log('🧪 Testing all cart functions...');
    
    // Test function availability
    const requiredFunctions = [
        'updateCartDisplay',
        'updateCartSummary', 
        'updateProcessButtonState',
        'addProductToCart',
        'clearCart'
    ];
    
    requiredFunctions.forEach(funcName => {
        const available = typeof window[funcName] === 'function';
        console.log(`${funcName}: ${available ? '✅ Available' : '❌ Missing'}`);
    });
    
    // Test elements
    const requiredElements = [
        'processTransactionBtn',
        'subtotal',
        'totalDiscount', 
        'grandTotal',
        'cartItems'
    ];
    
    requiredElements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`Element ${id}: ${element ? '✅ Found' : '❌ Missing'}`);
    });
    
    console.log('Cart contents:', cart);
    console.log('Return mode:', isReturnMode);
}

// Export comprehensive test function
window.testCartFunctions = testCartFunctions;

// Test customer data collection and validation
function testCustomerValidation() {
    console.log('🧪 Testing customer validation...');
    
    // Test customer data collection
    const customerData = collectCustomerData();
    console.log('📋 Customer data collected:', customerData);
    
    // Test validation logic
    const hasSelectedCustomer = customerData.customerId && customerData.customerId !== '0';
    const hasNewCustomerData = customerData.name.trim() && customerData.phone.trim();
    
    console.log('🔍 Validation results:');
    console.log(`  - Has selected customer: ${hasSelectedCustomer ? '✅' : '❌'}`);
    console.log(`  - Has new customer data: ${hasNewCustomerData ? '✅' : '❌'}`);
    console.log(`  - Customer ID: "${customerData.customerId}"`);
    console.log(`  - Customer Name: "${customerData.name}"`);
    console.log(`  - Customer Phone: "${customerData.phone}"`);
    
    const isValid = hasSelectedCustomer || hasNewCustomerData;
    console.log(`🎯 Overall validation: ${isValid ? '✅ PASS' : '❌ FAIL'}`);
    
    // Test form fields existence
    const requiredFields = ['customerSelect', 'customerName', 'customerPhone', 'customerAddress'];
    requiredFields.forEach(fieldId => {
        const element = document.getElementById(fieldId);
        console.log(`📝 Field ${fieldId}: ${element ? '✅ Found' : '❌ Missing'}`);
        if (element) {
            console.log(`    └─ Value: "${element.value}"`);
        }
    });
    
    return { isValid, customerData, hasSelectedCustomer, hasNewCustomerData };
}

// Export customer test function
window.testCustomerValidation = testCustomerValidation;

// Show customer field requirements
function showCustomerRequirements() {
    console.log('📋 متطلبات بيانات العميل:');
    console.log('==================');
    console.log('🔹 لعميل موجود:');
    console.log('   └─ اختر العميل من القائمة المنسدلة');
    console.log('');
    console.log('🔹 لعميل جديد:');
    console.log('   ├─ الاسم (مطلوب)');
    console.log('   ├─ رقم الهاتف (مطلوب)');
    console.log('   └─ العنوان (اختياري)');
    console.log('');
    console.log('💡 يمكنك أيضاً البحث عن عميل موجود بالهاتف');
    
    const testResult = testCustomerValidation();
    return testResult;
}

// Export helper function
window.showCustomerRequirements = showCustomerRequirements;

// Initialize payment validation and features
function initializePaymentValidation() {
    console.log('💰 Initializing payment validation...');
    
    const amountPaidInput = document.getElementById('amountPaid');
    if (!amountPaidInput) {
        console.warn('⚠️ amountPaid input not found');
        return;
    }
    
    // Remove automatic validation - let user enter amount freely
    // amountPaidInput.addEventListener('input', function() {
    //     validatePaymentAmount();
    // });
    
    // Add event listener for amount paid input
    amountPaidInput.addEventListener('input', function() {
        validatePaymentAmount();
    });
    
    // Add event listener for shipping cost
    const shippingCostInput = document.getElementById('shippingCost');
    if (shippingCostInput) {
        shippingCostInput.addEventListener('input', function() {
            updateCartSummary();
            validatePaymentAmount();
        });
    }
    
    // Remove automatic calculation suggestion
    // amountPaidInput.addEventListener('focus', function() {
    //     suggestPaymentAmount();
    // });
    
    console.log('✅ Payment validation initialized');
}

// Validate payment amount
function validatePaymentAmount() {
    const amountPaidInput = document.getElementById('amountPaid');
    const amountPaid = Math.round(parseFloat(amountPaidInput?.value || 0) * 100) / 100;
    const grandTotal = getCartGrandTotal();
    
    // Remove previous validation classes
    amountPaidInput.classList.remove('is-valid', 'is-invalid');
    
    // Clear previous feedback
    let feedback = amountPaidInput.parentElement.querySelector('.payment-feedback');
    if (feedback) {
        feedback.remove();
    }
    
    if (amountPaid < 0) {
        amountPaidInput.classList.add('is-invalid');
        showPaymentFeedback(amountPaidInput, '❌ المبلغ لا يمكن أن يكون سالباً', 'invalid');
    } else if (amountPaid === 0) {
        amountPaidInput.classList.add('is-invalid');
        showPaymentFeedback(amountPaidInput, '⚠️ معاملة غير مدفوعة', 'warning');
    } else if (amountPaid < grandTotal) {
        amountPaidInput.classList.add('is-valid');
        const remaining = grandTotal - amountPaid;
        showPaymentFeedback(amountPaidInput, `💰 مدفوع جزئياً - متبقي: ${remaining.toFixed(2)} ج.م`, 'partial');
        
        // Update remaining amount display
        updateRemainingAmountDisplay(remaining);
    } else if (amountPaid >= grandTotal) {
        amountPaidInput.classList.add('is-valid');
        if (amountPaid > grandTotal) {
            const change = amountPaid - grandTotal;
            showPaymentFeedback(amountPaidInput, `✅ مدفوع بالكامل - الباقي: ${change.toFixed(2)} ج.م`, 'overpaid');
            
            // Update remaining amount display (negative for change)
            updateRemainingAmountDisplay(-change);
        } else {
            showPaymentFeedback(amountPaidInput, '✅ مدفوع بالكامل', 'paid');
            
            // Update remaining amount display (zero)
            updateRemainingAmountDisplay(0);
        }
    }
    
    // Also call calculateRemainingAmount for console logging
    calculateRemainingAmount();
}

// Update remaining amount display
function updateRemainingAmountDisplay(remaining) {
    const remainingElement = document.getElementById('remainingAmount');
    if (remainingElement) {
        if (remaining > 0) {
            remainingElement.textContent = `${remaining.toFixed(2)} ج.م`;
            remainingElement.className = 'summary-value warning';
            remainingElement.title = `المتبقي: ${remaining.toFixed(2)} ج.م`;
        } else if (remaining < 0) {
            remainingElement.textContent = `${Math.abs(remaining).toFixed(2)} ج.م`;
            remainingElement.className = 'summary-value success';
            remainingElement.title = `الباقي: ${Math.abs(remaining).toFixed(2)} ج.م`;
        } else {
            remainingElement.textContent = '0.00 ج.م';
            remainingElement.className = 'summary-value success';
            remainingElement.title = 'تم الدفع بالكامل';
        }
        
        console.log(`💰 تم تحديث المبلغ المتبقي: ${remainingElement.textContent}`);
    } else {
        console.warn('⚠️ عنصر المبلغ المتبقي غير موجود');
    }
}

// Show payment feedback
function showPaymentFeedback(input, message, type) {
    const feedback = document.createElement('div');
    feedback.className = `payment-feedback ${type}`;
    feedback.style.cssText = `
        font-size: 12px;
        margin-top: 5px;
        padding: 5px 8px;
        border-radius: 4px;
        font-weight: 500;
    `;
    
    switch(type) {
        case 'invalid':
            feedback.style.background = '#fee';
            feedback.style.color = '#d32f2f';
            feedback.style.border = '1px solid #ffcdd2';
            break;
        case 'warning':
            feedback.style.background = '#fff3e0';
            feedback.style.color = '#f57c00';
            feedback.style.border = '1px solid #ffcc02';
            break;
        case 'partial':
            feedback.style.background = '#e3f2fd';
            feedback.style.color = '#1976d2';
            feedback.style.border = '1px solid #90caf9';
            break;
        case 'paid':
            feedback.style.background = '#e8f5e8';
            feedback.style.color = '#2e7d32';
            feedback.style.border = '1px solid #a5d6a7';
            break;
        case 'overpaid':
            feedback.style.background = '#f3e5f5';
            feedback.style.color = '#7b1fa2';
            feedback.style.border = '1px solid #ce93d8';
            break;
    }
    
    feedback.textContent = message;
    input.parentElement.appendChild(feedback);
}

// Calculate remaining amount (helper function)
function calculateRemainingAmount() {
    const amountPaidInput = document.getElementById('amountPaid');
    const amountPaid = Math.round(parseFloat(amountPaidInput?.value || 0) * 100) / 100;
    const grandTotal = getCartGrandTotal();
    
    const remaining = grandTotal - amountPaid;
    
    console.log('💰 Remaining Amount Calculation:', {
        grandTotal: grandTotal.toFixed(2),
        amountPaid: amountPaid.toFixed(2),
        remaining: remaining.toFixed(2)
    });
    
    const result = {
        grandTotal,
        amountPaid,
        remaining,
        isPaid: amountPaid >= grandTotal,
        isOverpaid: amountPaid > grandTotal,
        change: amountPaid > grandTotal ? amountPaid - grandTotal : 0
    };
    
    // Show result to user
    if (result.isOverpaid) {
        showMessage(`💰 إجمالي الفاتورة: ${result.grandTotal.toFixed(2)} ج.م | المدفوع: ${result.amountPaid.toFixed(2)} ج.م | الباقي: ${result.change.toFixed(2)} ج.م`, 'success');
    } else if (result.isPaid) {
        showMessage(`✅ إجمالي الفاتورة: ${result.grandTotal.toFixed(2)} ج.م | المدفوع: ${result.amountPaid.toFixed(2)} ج.م | تم الدفع بالكامل`, 'success');
    } else {
        showMessage(`💰 إجمالي الفاتورة: ${result.grandTotal.toFixed(2)} ج.م | المدفوع: ${result.amountPaid.toFixed(2)} ج.م | المتبقي: ${result.remaining.toFixed(2)} ج.م`, 'info');
    }
    
    return result;
}

// Suggest payment amount based on cart total (optional)
function suggestPaymentAmount() {
    const amountPaidInput = document.getElementById('amountPaid');
    const grandTotal = getCartGrandTotal();
    
    if (!amountPaidInput.value && grandTotal > 0) {
        const suggest = confirm(`💡 هل تريد تعيين المبلغ المدفوع إلى إجمالي الفاتورة (${grandTotal.toFixed(2)} ج.م)؟`);
        if (suggest) {
            amountPaidInput.value = grandTotal.toFixed(2);
            // Don't auto-validate, just show the calculation
            const calc = calculateRemainingAmount();
            showMessage(`💰 المبلغ المدفوع: ${calc.amountPaid.toFixed(2)} ج.م - المتبقي: ${calc.remaining.toFixed(2)} ج.م`, 'info');
        }
    }
}

// Get cart grand total
function getCartGrandTotal() {
    if (!cart || cart.length === 0) return 0;
    
    let totalAmount = 0;
    let totalDiscount = 0;
    
    cart.forEach(item => {
        const itemSubTotal = item.price * item.quantity; // Don't use Math.abs here
        const itemTotal = item.total || itemSubTotal;
        const discountAmount = item.discount || 0; // Direct amount
        
        if (item.quantity < 0) {
            // Return item - add negative value, but don't add discount
            totalAmount += itemSubTotal; 
            // totalDiscount += discountAmount; // لا نحسب الخصم في الإرجاع
        } else {
            // Sale item - add positive value and discount
            totalAmount += itemSubTotal; 
            totalDiscount += discountAmount;
        }
    });
    
    // Get shipping cost
    const shippingCostInput = document.getElementById('shippingCost');
    const shippingCost = parseFloat(shippingCostInput?.value || 0);
    
    const finalTotal = totalAmount - totalDiscount + shippingCost;
    
    // Log calculation for debugging
    console.log('💰 Cart Grand Total Calculation:', {
        totalAmount: totalAmount.toFixed(2),
        totalDiscount: totalDiscount.toFixed(2),
        shippingCost: shippingCost.toFixed(2),
        finalTotal: finalTotal.toFixed(2),
        items: cart.map(item => ({
            name: item.name,
            quantity: item.quantity,
            subtotal: (Math.abs(item.price * item.quantity)).toFixed(2),
            discount: (item.discount || 0).toFixed(2),
            total: Math.abs(item.total || (item.price * item.quantity)).toFixed(2),
            mode: item.quantity < 0 ? 'return' : 'sale'
        }))
    });
    
    return finalTotal;
}

// Test payment functionality
function testPaymentSystem() {
    console.log('🧪 Testing payment system...');
    
    const amountPaidInput = document.getElementById('amountPaid');
    const grandTotal = getCartGrandTotal();
    
    console.log('📊 Current state:');
    console.log(`  - Cart grand total: ${grandTotal.toFixed(2)} ج.م`);
    console.log(`  - Amount paid input: ${amountPaidInput ? '✅ Found' : '❌ Missing'}`);
    
    if (amountPaidInput) {
        console.log(`  - Current paid amount: ${amountPaidInput.value || '0'} ج.م`);
        
        // Test different payment scenarios
        const testCases = [
            { amount: 0, desc: 'غير مدفوع' },
            { amount: grandTotal * 0.5, desc: 'مدفوع جزئياً' },
            { amount: grandTotal, desc: 'مدفوع بالكامل' },
            { amount: grandTotal * 1.2, desc: 'مدفوع زائد' }
        ];
        
        console.log('🔍 Testing payment scenarios:');
        testCases.forEach((testCase, index) => {
            console.log(`  ${index + 1}. ${testCase.desc}: ${testCase.amount.toFixed(2)} ج.م`);
        });
        
        console.log('💡 Use: amountPaidInput.value = "100"; validatePaymentAmount(); to test');
        
        // Auto-test payment scenarios
        console.log('🚀 بدء اختبار سيناريوهات الدفع تلقائياً...');
        testCases.forEach((testCase, index) => {
            setTimeout(() => {
                console.log(`💳 اختبار ${index + 1}: ${testCase.desc} - ${testCase.amount.toFixed(2)} ج.م`);
                amountPaidInput.value = testCase.amount.toFixed(2);
                validatePaymentAmount();
            }, (index + 1) * 3000);
        });
    }
    
    return { grandTotal, amountPaidInput, hasCart: cart.length > 0 };
}

// Export payment test function
window.testPaymentSystem = testPaymentSystem;

// Quick test for payment amount
function testPaymentAmount(amount) {
    console.log(`🧪 اختبار المبلغ المدفوع: ${amount} ج.م`);
    
    const amountPaidInput = document.getElementById('amountPaid');
    if (amountPaidInput) {
        amountPaidInput.value = amount;
        validatePaymentAmount();
        
        const grandTotal = getCartGrandTotal();
        const remaining = grandTotal - parseFloat(amount);
        
        console.log('📊 النتائج:');
        console.log(`  - إجمالي الفاتورة: ${grandTotal.toFixed(2)} ج.م`);
        console.log(`  - المبلغ المدفوع: ${amount} ج.م`);
        console.log(`  - المتبقي: ${remaining.toFixed(2)} ج.م`);
        
        if (remaining > 0) {
            console.log(`  - الحالة: مدفوع جزئياً - متبقي ${remaining.toFixed(2)} ج.م`);
        } else if (remaining < 0) {
            console.log(`  - الحالة: مدفوع زائد - باقي ${Math.abs(remaining).toFixed(2)} ج.م`);
        } else {
            console.log(`  - الحالة: مدفوع بالكامل`);
        }
    } else {
        console.error('❌ حقل المبلغ المدفوع غير موجود');
    }
}



// Get invoice status badge HTML
function getInvoiceStatusBadge(status) {
    const statusMap = {
        'Draft': { text: 'في المكتب', class: 'bg-secondary' },
        'Sent': { text: 'غير مدفوع', class: 'bg-warning' },
        'Paid': { text: 'مدفوع', class: 'bg-success' },
        'PartiallyPaid': { text: 'مدفوع جزئياً', class: 'bg-info' },
        'Overdue': { text: 'متأخر', class: 'bg-danger' },
        'Cancelled': { text: 'ملغي', class: 'bg-dark' }
    };
    
    const statusInfo = statusMap[status] || statusMap['Paid'];
    return `<span class="badge ${statusInfo.class}">${statusInfo.text}</span>`;
}











// Create camelCase version of transaction data
function prepareTransactionDataCamelCase(customerData) {
    console.log('🔧 Preparing camelCase transaction data...');
    
    if (!cart || cart.length === 0) {
        console.error('❌ Cart is empty!');
        return null;
    }
    
    let subTotal = 0;
    let totalDiscount = 0;
    
    const items = cart.map(item => {
        const itemSubTotal = Math.abs(item.price * item.quantity);
        const itemDiscount = item.discount || 0; // Direct amount, not percentage
        const itemTotal = itemSubTotal - itemDiscount;
        
        subTotal += (item.quantity < 0 ? -itemSubTotal : itemSubTotal); // Use subtotal for calculation
        // للإرجاع: لا نرسل الخصم (الخصم الأصلي لا يُعتبر خسارة)
        totalDiscount += (item.quantity < 0 ? 0 : itemDiscount);
        
        return {
            productId: item.productId || item.id,
            productName: item.name,
            quantity: item.quantity,
            price: item.price,
            discount: item.quantity < 0 ? 0 : (item.discount || 0), // للإرجاع: لا خصم
            notes: item.notes || null
        };
    });
    
    // Get fields
    const policyNumber = document.getElementById('policyNumber')?.value || '';
            const orderOrigin = document.getElementById('orderOrigin')?.value || 7;
    const paymentMethod = document.getElementById('paymentMethod')?.value || '';
    const shippingCost = parseFloat(document.getElementById('shippingCost')?.value || 0);
    const invoiceNumber = document.getElementById('invoiceNumber')?.value || '';
    const originalInvoiceNumber = document.getElementById('originalInvoiceNumber')?.value || '';
    const returnNotes = document.getElementById('returnNotes')?.value || '';
    const amountPaidInput = document.getElementById('amountPaid');
    const amountPaid = Math.round(parseFloat(amountPaidInput?.value || 0) * 100) / 100;
    const invoiceType = subTotal < 0 ? 2 : 1;
    
    return {
        customerId: parseInt(customerData.customerId) || 0,
        customerName: customerData.name || '',
        customerPhone: customerData.phone || '',
        customerAddress: customerData.address || '',
        items: items,
        amountPaid: amountPaid,
        invoiceNumber: invoiceNumber,
        policyNumber: policyNumber,
                    orderOrigin: parseInt(orderOrigin) || 7,
        paymentMethod: paymentMethod,
        shippingCost: subTotal >= 0 ? shippingCost : 0,
        invoiceType: invoiceType,
        originalInvoiceNumber: originalInvoiceNumber,
        notes: returnNotes
    };
}





// Animate field fill effect
function animateFieldFill(field) {
    if (!field) return;
    
    field.classList.add('filled');
    setTimeout(() => {
        field.classList.remove('filled');
    }, 400);
}

// Update process button state based on cart contents
function updateProcessButtonState() {
    try {
        const processButton = document.getElementById('processTransactionBtn');
        if (!processButton) {
            console.warn('⚠️ Process button not found');
            return;
        }
        
        const hasItems = cart && cart.length > 0;
        const hasValidItems = hasItems && cart.some(item => item.quantity !== 0);
        
        if (hasValidItems) {
            processButton.disabled = false;
            processButton.classList.remove('btn-secondary');
            processButton.classList.add('btn-success');
            
            const totalItems = cart.reduce((sum, item) => sum + Math.abs(item.quantity), 0);
            const buttonText = isReturnMode ? 
                `💰 معالجة الإرجاع (${totalItems} قطعة)` : 
                `💰 إنهاء المعاملة (${totalItems} قطعة)`;
            processButton.textContent = buttonText;
            
            console.log('✅ Process button enabled:', buttonText);
        } else {
            processButton.disabled = true;
            processButton.classList.remove('btn-success');
            processButton.classList.add('btn-secondary');
            processButton.textContent = '💰 إنهاء المعاملة';
            
            console.log('⚠️ Process button disabled - no valid items');
        }
    } catch (error) {
        console.error('❌ Error updating process button state:', error);
    }
}

// Print invoice (placeholder)
function printInvoice(invoiceId) {
    console.log('🖨️ Printing invoice:', invoiceId);
    
    // Navigate to invoice page instead of opening new tab
    const printUrl = `/Invoices/ModernInvoice/${invoiceId}`;
    window.location.href = printUrl;
}

// ===============================================
// Utility Functions
// ===============================================

// Show message to user (utility function)
const DEBUG = false;

function showMessage(message, type = 'info', duration = 5000) {
    if (DEBUG) console.log(`Message (${type}): ${message}`);
    
    // Create toast container if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toastContainer';
        toastContainer.className = 'toast-container';
        document.body.appendChild(toastContainer);
    }
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Set icon based on type
    const typeEmojis = {
        'info': 'ℹ️',
        'success': '✅',
        'warning': '⚠️',
        'error': '❌'
    };
    
    const icon = typeEmojis[type] || 'ℹ️';
    
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-icon">${icon}</span>
            <span class="toast-message">${message}</span>
            <button class="toast-close" onclick="closeToast(this)">&times;</button>
        </div>
    `;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Show toast with animation
    setTimeout(() => {
        toast.classList.add('toast-show');
    }, 10);
    
    // Auto-hide after specified duration (longer for errors)
    const hideDuration = type === 'error' ? 8000 : duration;
    setTimeout(() => {
        hideToast(toast);
    }, hideDuration);
    
    // Also show alert for critical errors
    if (type === 'error') {
        alert(message);
    }
}

// Hide toast
function hideToast(toast) {
    if (toast && toast.parentNode) {
        toast.classList.remove('toast-show');
        toast.classList.add('toast-hide');
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }
}

// Close toast manually
function closeToast(button) {
    const toast = button.closest('.toast');
    hideToast(toast);
}

// Log system information
function logSystemInfo() {
    console.log('=== معلومات النظام ===');
    console.log('User Agent:', navigator.userAgent);
    console.log('Screen Size:', `${screen.width}x${screen.height}`);
    console.log('Viewport Size:', `${window.innerWidth}x${window.innerHeight}`);
    console.log('Current URL:', window.location.href);
    console.log('Document Ready State:', document.readyState);
    console.log('=====================================');
}

// ===============================================
// Initialization
// ===============================================

// Initialize the cashier system
async function initializeCashierSystem() {
    console.log('🚀 تهيئة نظام الكاشير...');
    
    // Log system information
    logSystemInfo();
    
    // Test essential elements (updated for new system)
    const essentialElements = [
        'processTransactionBtn',
        'clearCartBtn',
    ];
    
    let missingElements = [];
    essentialElements.forEach(id => {
        const element = document.getElementById(id);
        if (!element) {
            missingElements.push(id);
        }
    });
    
    if (missingElements.length > 0) {
        console.warn('عناصر مفقودة:', missingElements);
    } else {
        console.log('✅ جميع العناصر الأساسية موجودة');
    }
    
    // Test essential functions (updated for new system)
    const essentialFunctions = [
        'testJS',
        'clearCart',
        'processTransaction',
        'addProductToCart'
    ];
    
    console.log('=== فحص الوظائف الأساسية ===');
    essentialFunctions.forEach(funcName => {
        const funcType = typeof window[funcName];
        console.log(`${funcName}: ${funcType}`);
    });
    
    console.log('✅ تم تهيئة نظام الكاشير بنجاح');
    console.log('الوقت الحالي:', new Date().toLocaleString());
    
    // Initialize customer form validation
    initializeCustomerValidation();
    
    // Initialize cart state
    updateProcessButtonState();
    updateCartSummary();
    
    // Initialize payment validation
    initializePaymentValidation();
    
    // Initialize mode-specific features
    initializeModeFeatures();
    
    // Initialize order origin change listener
    initializeOrderOriginListener();
    
    // Note: Automatic number generation has been removed as requested
}

// Initialize order origin change listener
function initializeOrderOriginListener() {
    const orderOriginSelect = document.getElementById('orderOrigin');
    if (orderOriginSelect) {
        orderOriginSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            const selectedText = this.options[this.selectedIndex].text;
            console.log(`🏪 Order origin changed to: ${selectedText} (${selectedValue})`);
            
            // Update payment method field visibility based on selection
            const paymentMethodField = document.getElementById('paymentMethod');
            if (paymentMethodField) {
                const onlineOrigins = ['1', '2', '3', '4']; // Website, Instagram, Facebook, WhatsApp
                if (onlineOrigins.includes(selectedValue)) {
                    paymentMethodField.required = true;
                    paymentMethodField.style.borderColor = '#dc3545';
                } else {
                    paymentMethodField.required = false;
                    paymentMethodField.style.borderColor = '';
                }
            }
            
            // Show success message
            showMessage(`تم تغيير مصدر الطلب إلى: ${selectedText}`, 'success');
        });
        
        console.log('✅ Order origin change listener initialized');
    } else {
        console.warn('⚠️ Order origin select not found');
    }
}

// Run initialization when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => initializeCashierSystem());
} else {
    // DOM is already loaded
    initializeCashierSystem();
}

// Also run on window load as backup
window.addEventListener('load', function() {
    console.log('✅ Window loaded - Cashier system ready');
});

// ===============================================
// Enhanced Customer Management Functions
// ===============================================

// Add event listeners for customer search
document.addEventListener('DOMContentLoaded', function() {
    // Add Enter key support for phone search
    const phoneSearchInput = document.getElementById('customerPhone');
    if (phoneSearchInput) {
        phoneSearchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchCustomerByPhone();
            }
        });
        
        // Add auto-search when phone number is complete (11 digits)
        phoneSearchInput.addEventListener('input', function(e) {
            const phone = e.target.value.trim();
            if (phone.length === 11 && /^[0-9]{11}$/.test(phone)) {
                // Auto-search after a short delay
                setTimeout(() => {
                    searchCustomerByPhone();
                }, 500);
            }
        });
    }
    
    console.log('✅ Customer search event listeners added');
});

// Handle customer selection from dropdown
function handleCustomerSelection() {
    const select = document.getElementById('customerSelect');
    const selectedOption = select.options[select.selectedIndex];
    
    console.log('👤 Customer selection changed:', selectedOption.value);
    
    if (selectedOption.value) {
        // Fill customer data from selected option
        fillCustomerDataFromOption(selectedOption);
        
        const customerName = selectedOption.getAttribute('data-name');
        updateCustomerStatus(`✅ تم تحديد العميل: ${customerName}`, 'success');
        animateCustomerFilled();
        
        // Show success message
        showMessage(`تم تحديد العميل: ${customerName}`, 'success');
        
        console.log(`✅ Customer selected: ${customerName}`);
    } else {
        clearCustomerData();
        updateCustomerStatus('يرجى اختيار عميل', 'info');
        console.log('🔄 Customer selection cleared');
    }
}

// Fill customer data from search results
function fillCustomerDataFromSearch(customer) {
    try {
        console.log('🔄 Filling customer data from search...');
        
        // Fill name
        const nameField = document.getElementById('customerName');
        if (nameField) {
            nameField.value = customer.name || '';
            animateFieldFill(nameField);
            console.log(`✅ Name filled: ${nameField.value}`);
        }
        
        // Fill phone numbers (both fields) without formatting
        const phoneValue = customer.phone || '';
        const phoneField = document.getElementById('customerPhone');
        const phoneInputField = document.getElementById('customerPhoneInput');
        
        if (phoneField) {
            phoneField.value = phoneValue;
            animateFieldFill(phoneField);
            console.log(`✅ Phone field filled: ${phoneField.value}`);
        }
        if (phoneInputField) {
            phoneInputField.value = phoneValue;
            animateFieldFill(phoneInputField);
            console.log(`✅ Phone input field filled: ${phoneInputField.value}`);
        }
        
        // Fill additional phone without formatting
        const additionalPhoneField = document.getElementById('customerAdditionalPhone');
        if (additionalPhoneField) {
            additionalPhoneField.value = customer.additionalPhone || '';
            animateFieldFill(additionalPhoneField);
            console.log(`✅ Additional phone filled: ${additionalPhoneField.value}`);
        }
        
        // Fill email
        const emailField = document.getElementById('customerEmail');
        if (emailField) {
            emailField.value = customer.email || '';
            animateFieldFill(emailField);
            console.log(`✅ Email filled: ${emailField.value}`);
        }
        
        // Fill governorate
        const governorateField = document.getElementById('customerGovernorate');
        if (governorateField) {
            governorateField.value = customer.governorate || '';
            animateFieldFill(governorateField);
            console.log(`✅ Governorate filled: ${governorateField.value}`);
        }
        
        // Fill district
        const districtField = document.getElementById('customerDistrict');
        if (districtField) {
            districtField.value = customer.district || '';
            animateFieldFill(districtField);
            console.log(`✅ District filled: ${districtField.value}`);
        }
        
        // Fill detailed address
        const detailedAddressField = document.getElementById('customerDetailedAddress');
        if (detailedAddressField) {
            detailedAddressField.value = customer.detailedAddress || '';
            animateFieldFill(detailedAddressField);
            console.log(`✅ Detailed address filled: ${detailedAddressField.value}`);
        }
        
        console.log('✅ All customer fields filled successfully');
        
    } catch (error) {
        console.error('❌ Error filling customer data from search:', error);
    }
}

// Update customer select dropdown to show selected customer
function updateCustomerSelect(customer) {
    try {
        const select = document.getElementById('customerSelect');
        if (!select) {
            console.warn('Customer select dropdown not found');
            return;
        }
        
        // Find and select the customer in the dropdown
        for (let i = 0; i < select.options.length; i++) {
            const option = select.options[i];
            if (option.value == customer.id) {
                select.selectedIndex = i;
                console.log(`✅ Customer select updated to: ${customer.name}`);
                return;
            }
        }
        
        // If customer not found in dropdown, add it temporarily
        const newOption = document.createElement('option');
        newOption.value = customer.id;
        newOption.text = `${customer.name} - ${customer.phone}`;
        newOption.setAttribute('data-name', customer.name);
        newOption.setAttribute('data-phone', customer.phone);
        newOption.setAttribute('data-additional-phone', customer.additionalPhone || '');
        newOption.setAttribute('data-email', customer.email || '');
        newOption.setAttribute('data-governorate', customer.governorate || '');
        newOption.setAttribute('data-district', customer.district || '');
        newOption.setAttribute('data-detailed-address', customer.detailedAddress || '');
        
        select.add(newOption);
        select.selectedIndex = select.options.length - 1;
        
        console.log(`✅ Customer added to dropdown: ${customer.name}`);
        
    } catch (error) {
        console.error('❌ Error updating customer select:', error);
    }
}

// Fill customer data from dropdown option
function fillCustomerDataFromOption(option) {
    try {
        console.log('🔄 Filling customer data from selection...');
        
        // Fill name
        const nameField = document.getElementById('customerName');
        if (nameField) {
            nameField.value = option.getAttribute('data-name') || '';
            animateFieldFill(nameField);
            console.log(`✅ Name filled: ${nameField.value}`);
        }
        
        // Fill phone numbers (both fields) without formatting
        const phoneValue = option.getAttribute('data-phone') || '';
        const phoneField = document.getElementById('customerPhone');
        const phoneInputField = document.getElementById('customerPhoneInput');
        
        if (phoneField) {
            phoneField.value = phoneValue;
            animateFieldFill(phoneField);
            console.log(`✅ Phone field filled: ${phoneField.value}`);
        }
        if (phoneInputField) {
            phoneInputField.value = phoneValue;
            animateFieldFill(phoneInputField);
            console.log(`✅ Phone input field filled: ${phoneInputField.value}`);
        }
        
        // Fill additional phone without formatting
        const additionalPhoneField = document.getElementById('customerAdditionalPhone');
        if (additionalPhoneField) {
            additionalPhoneField.value = option.getAttribute('data-additional-phone') || '';
            animateFieldFill(additionalPhoneField);
            console.log(`✅ Additional phone filled: ${additionalPhoneField.value}`);
        }
        
        // Fill email
        const emailField = document.getElementById('customerEmail');
        if (emailField) {
            emailField.value = option.getAttribute('data-email') || '';
            animateFieldFill(emailField);
            console.log(`✅ Email filled: ${emailField.value}`);
        }
        
        // Fill governorate
        const governorateField = document.getElementById('customerGovernorate');
        if (governorateField) {
            governorateField.value = option.getAttribute('data-governorate') || '';
            animateFieldFill(governorateField);
            console.log(`✅ Governorate filled: ${governorateField.value}`);
        }
        
        // Fill district
        const districtField = document.getElementById('customerDistrict');
        if (districtField) {
            districtField.value = option.getAttribute('data-district') || '';
            animateFieldFill(districtField);
            console.log(`✅ District filled: ${districtField.value}`);
        }
        
        // Fill detailed address
        const detailedAddressField = document.getElementById('customerDetailedAddress');
        if (detailedAddressField) {
            detailedAddressField.value = option.getAttribute('data-detailed-address') || '';
            animateFieldFill(detailedAddressField);
            console.log(`✅ Detailed address filled: ${detailedAddressField.value}`);
        }
        
        // Fill backward compatibility address field if exists
        const addressField = document.getElementById('customerAddress');
        if (addressField) {
            const fullAddress = [
                option.getAttribute('data-governorate'),
                option.getAttribute('data-district'),
                option.getAttribute('data-detailed-address')
            ].filter(Boolean).join(', ');
            addressField.value = fullAddress;
            animateFieldFill(addressField);
            console.log(`✅ Address field filled: ${fullAddress}`);
        }
        
        console.log('✅ Customer data filled successfully');
        
        // Validate form after filling
        if (typeof validateCustomerForm === 'function') {
        validateCustomerForm();
        }
        
    } catch (error) {
        console.error('❌ Error filling customer data:', error);
        showMessage('حدث خطأ في تعبئة بيانات العميل', 'error');
    }
}

// Clear all customer data
function clearCustomerData() {
    const customerFields = [
        'customerSelect',
        'customerName',
        'customerPhoneInput', 
        'customerAdditionalPhone',
        'customerEmail',
        'customerGovernorate',
        'customerDistrict',
        'customerDetailedAddress',
        'customerPhone'
    ];
    
    customerFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';
            field.classList.remove('is-valid', 'is-invalid');
        }
    });
    
    updateCustomerStatus('تم مسح بيانات العميل', 'info');
    console.log('Customer data cleared');
}

// Update customer status indicator
function updateCustomerStatus(message, type = 'info') {
    const statusElement = document.getElementById('customerStatusIndicator');
    const statusText = document.getElementById('customerStatusText');
    
    if (statusElement && statusText) {
        // Remove existing status classes
        statusElement.className = 'status-indicator';
        
        // Add new status class
        statusElement.classList.add(type);
        
        // Update text
        statusText.textContent = message;
        
        // Update icon based on type
        const icon = statusElement.querySelector('i');
        if (icon) {
            icon.className = getStatusIcon(type);
        }
    }
}

// Get icon class based on status type
function getStatusIcon(type) {
    const icons = {
        'info': 'fas fa-info-circle me-1',
        'success': 'fas fa-check-circle me-1',
        'warning': 'fas fa-exclamation-triangle me-1',
        'error': 'fas fa-times-circle me-1'
    };
    
    return icons[type] || icons['info'];
}

// Animate customer section when data is filled
function animateCustomerFilled() {
    const customerSection = document.querySelector('.cashier-card-body');
    if (customerSection) {
        customerSection.classList.add('customer-info-filled');
        setTimeout(() => {
            customerSection.classList.remove('customer-info-filled');
        }, 500);
    }
}

// Validate customer form
function validateCustomerForm() {
    const nameField = document.getElementById('customerName');
    const phoneField = document.getElementById('customerPhoneInput');
    const emailField = document.getElementById('customerEmail');
    const additionalPhoneField = document.getElementById('customerAdditionalPhone');
    
    let isValid = true;
    
    // Validate name
    if (nameField && nameField.value.trim().length >= 2) {
        nameField.classList.remove('is-invalid');
        nameField.classList.add('is-valid');
    } else if (nameField && nameField.value.trim().length > 0) {
        nameField.classList.remove('is-valid');
        nameField.classList.add('is-invalid');
        isValid = false;
    }
    
    // Validate main phone
    if (phoneField && /^[0-9]{11}$/.test(phoneField.value.trim())) {
        phoneField.classList.remove('is-invalid');
        phoneField.classList.add('is-valid');
    } else if (phoneField && phoneField.value.trim().length > 0) {
        phoneField.classList.remove('is-valid');
        phoneField.classList.add('is-invalid');
        isValid = false;
    }
    
    // Validate email (optional)
    if (emailField && emailField.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (emailRegex.test(emailField.value.trim())) {
            emailField.classList.remove('is-invalid');
            emailField.classList.add('is-valid');
        } else {
            emailField.classList.remove('is-valid');
            emailField.classList.add('is-invalid');
            isValid = false;
        }
    }
    
    // Validate additional phone (optional)
    if (additionalPhoneField && additionalPhoneField.value.trim()) {
        if (/^[0-9]{11}$/.test(additionalPhoneField.value.trim())) {
            additionalPhoneField.classList.remove('is-invalid');
            additionalPhoneField.classList.add('is-valid');
        } else {
            additionalPhoneField.classList.remove('is-valid');
            additionalPhoneField.classList.add('is-invalid');
            isValid = false;
        }
    }
    
    // Update status based on validation
    if (isValid && nameField?.value.trim() && phoneField?.value.trim()) {
        updateCustomerStatus('✅ بيانات العميل صحيحة', 'success');
    } else if (nameField?.value.trim() || phoneField?.value.trim()) {
        updateCustomerStatus('⚠️ يرجى استكمال البيانات المطلوبة', 'warning');
    }
    
    return isValid;
}

// Enhanced search customer by phone with validation
function enhancedSearchCustomerByPhone() {
    const phoneInput = document.getElementById('customerPhone');
    const phone = phoneInput?.value?.trim();
    
    if (!phone) {
        showMessage('❌ رجاء ادخال رقم الهاتف', 'warning');
        phoneInput?.focus();
        return;
    }
    
    // Validate phone number format
    if (!/^[0-9]{11}$/.test(phone)) {
        showMessage('❌ رقم الهاتف يجب أن يكون 11 رقماً', 'warning');
        phoneInput?.focus();
        return;
    }
    
    updateCustomerStatus('جاري البحث عن العميل...', 'info');
    
    // Simulate search (replace with actual AJAX call)
    setTimeout(() => {
        // For now, show search result
        updateCustomerStatus(`تم البحث عن: ${phone} - الوظيفة قيد التطوير`, 'warning');
        showMessage(`🔍 البحث عن العميل: ${phone} - قريباً!`, 'info');
        
        // Clear search input
        phoneInput.value = '';
    }, 1000);
}

// ===============================================
// Enhanced Invoice Search Functions
// ===============================================

// Enhanced search for original invoice
function searchOriginalInvoice() {
    console.log('🔍 Starting invoice search...');
    
    const invoiceInput = document.getElementById('originalInvoiceNumber');
    const searchResult = document.getElementById('invoiceSearchResult');
    
    if (!invoiceInput || !searchResult) {
        console.error('❌ Required elements not found');
        showMessage('عناصر البحث غير موجودة', 'error');
        return;
    }
    
    const invoiceNumber = invoiceInput.value.trim();
    
    if (!invoiceNumber) {
        showMessage('⚠️ يرجى إدخال رقم الفاتورة', 'warning');
        invoiceInput.focus();
        return;
    }
    
    // Validate invoice number format
    if (invoiceNumber.length < 3) {
        showMessage('⚠️ رقم الفاتورة قصير جداً', 'warning');
        invoiceInput.focus();
        return;
    }
    
    // Show loading state
    searchResult.style.display = 'block';
    searchResult.innerHTML = createLoadingIndicator('جاري البحث عن الفاتورة...');
    
    // Real API call to search for invoice
    fetch(`/Cashier/SearchInvoices?invoiceNumber=${encodeURIComponent(invoiceNumber)}`)
        .then(response => response.json())
        .then(data => {
            console.log('🔍 Invoice search response:', data);
            
            if (data.success && data.invoices && data.invoices.length > 0) {
                // Display the first invoice found (or you could display all)
                const firstInvoice = data.invoices[0];
                displayInvoiceFound(firstInvoice);
                showMessage(`✅ تم العثور على ${data.invoices.length} فاتورة`, 'success');
            } else {
                // Display appropriate message based on the error
                        displayInvoiceNotFound(invoiceNumber, []);
                const message = data.message || `❌ لم يتم العثور على الفاتورة: ${invoiceNumber}`;
                
                // Show different message if it's about no returnable items
                if (message.includes('منتجات قابلة للإرجاع')) {
                    showMessage('ℹ️ تم إرجاع جميع منتجات هذه الفاتورة مسبقاً', 'info');
                } else {
                    showMessage(message, 'error');
                }
            }
        })
        .catch(error => {
            console.error('❌ Error searching invoice:', error);
            searchResult.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle fa-2x text-danger me-3"></i>
                    <div>
                        <h6 class="mb-1">❌ خطأ في الاتصال</h6>
                        <small class="text-muted">حدث خطأ في الاتصال بالخادم: ${error.message}</small>
                    </div>
                </div>
            `;
            showMessage('حدث خطأ في البحث عن الفاتورة', 'error');
        });
}

// Show all available invoices
function showAllInvoices() {
    console.log('📋 Showing all invoices...');
    
    const searchResult = document.getElementById('invoiceSearchResult');
    if (!searchResult) {
        console.error('❌ Search result element not found');
        return;
    }
    
    // Show loading state
    searchResult.style.display = 'block';
    searchResult.innerHTML = createLoadingIndicator('جاري تحميل جميع الفواتير...');
    
    // Real API call to get all invoices
    fetch('/Cashier/GetAllInvoices')
        .then(response => response.json())
        .then(data => {
            console.log('📋 All invoices response:', data);
            
            if (data.success && data.invoices) {
                displayAllInvoices(data.invoices);
                showMessage(`✅ تم تحميل ${data.invoices.length} فاتورة`, 'success');
            } else {
                displayNoInvoicesFound();
                showMessage('❌ لا توجد فواتير في النظام', 'error');
            }
        })
        .catch(error => {
            console.error('❌ Error fetching invoices:', error);
            searchResult.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle fa-2x text-danger me-3"></i>
                    <div>
                        <h6 class="mb-1">❌ خطأ في الاتصال</h6>
                        <small class="text-muted">حدث خطأ في تحميل الفواتير: ${error.message}</small>
                    </div>
                </div>
            `;
            showMessage('حدث خطأ في تحميل الفواتير', 'error');
        });
}

// Mock invoices removed - now using real data from API

// Create loading indicator HTML
function createLoadingIndicator(message) {
    return `
        <div class="text-center p-4">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="text-muted">
                <i class="fas fa-search me-2"></i>
                ${message}
            </div>
        </div>
    `;
}

// Display found invoice
function displayInvoiceFound(invoice) {
    const searchResult = document.getElementById('invoiceSearchResult');
    
    const itemsHtml = (invoice.items || []).map(item => `
        <tr>
            <td><strong>${item.productName || item.name}</strong></td>
            <td class="text-center">
                <span class="badge bg-secondary">${item.originalQuantity || item.quantity}</span>
                ${item.returnedQuantity ? `<br><small class="text-muted">مرتجع: ${item.returnedQuantity}</small>` : ''}
            </td>
            <td class="text-center">
                <span class="badge bg-success">${item.availableForReturn || item.quantity}</span>
                <br><small class="text-muted">متاح للإرجاع</small>
            </td>
            <td class="text-end">${(item.unitPrice || item.price || 0).toFixed(2)} ج.م</td>
            <td class="text-center">
                <button class="btn btn-sm btn-outline-primary add-to-return-btn" 
                        onclick="handleReturnItemAdd(this)" 
                        data-product-id="${item.productId}" 
                        data-product-name="${escapeHtml(item.productName || item.name || '')}" 
                        data-quantity="${item.availableForReturn || item.quantity}" 
                        data-price="${item.unitPrice || item.price || 0}">
                    <i class="fas fa-plus"></i> إضافة للإرجاع
                </button>
            </td>
        </tr>
    `).join('');
    
    searchResult.innerHTML = `
        <div class="alert alert-success">
            <div class="d-flex align-items-center mb-3">
                <i class="fas fa-check-circle fa-2x text-success me-3"></i>
                <div>
                    <h6 class="mb-1">✅ تم العثور على الفاتورة</h6>
                    <small class="text-muted">الفاتورة متاحة للإرجاع/الاستبدال</small>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <strong>رقم الفاتورة:</strong> ${invoice.invoiceNumber || invoice.number}<br>
                    <strong>اسم العميل:</strong> ${invoice.customerName || 'غير محدد'}<br>
                    <strong>رقم الهاتف:</strong> ${invoice.customerPhone || 'غير محدد'}
                </div>
                <div class="col-md-6">
                    <strong>التاريخ:</strong> ${new Date(invoice.invoiceDate || invoice.date).toLocaleDateString('ar-EG')}<br>
                    <strong>المبلغ الإجمالي:</strong> ${(invoice.totalAmount || invoice.total || 0).toFixed(2)} ج.م<br>
                    <strong>الحالة:</strong> ${getInvoiceStatusBadge(invoice.status || 'Paid')}
                </div>
            </div>
            
            <div class="mt-3">
                <h6>📦 منتجات الفاتورة:</h6>
                <div class="table-responsive">
                    <table class="table table-sm table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>المنتج</th>
                                <th class="text-center">الكمية الأصلية</th>
                                <th class="text-center">متاح للإرجاع</th>
                                <th class="text-end">السعر</th>
                                <th class="text-center">إجراء</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHtml}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

// Display invoice not found
function displayInvoiceNotFound(searchNumber, availableInvoices) {
    const searchResult = document.getElementById('invoiceSearchResult');
    
    const availableNumbers = availableInvoices.map(inv => `
        <button class="btn btn-outline-primary btn-sm me-2 mb-2" onclick="useInvoiceNumber('${inv.invoiceNumber || inv.number}')">
            ${inv.invoiceNumber || inv.number}
        </button>
    `).join('');
    
    searchResult.innerHTML = `
        <div class="alert alert-warning">
            <div class="d-flex align-items-center mb-3">
                <i class="fas fa-exclamation-triangle fa-2x text-warning me-3"></i>
                <div>
                    <h6 class="mb-1">⚠️ الفاتورة غير موجودة</h6>
                    <small class="text-muted">لم يتم العثور على فاتورة برقم: <strong>${searchNumber}</strong></small>
                </div>
            </div>
            
            <div class="mt-3">
                <h6>📋 الفواتير المتاحة:</h6>
                <div class="available-invoices">
                    ${availableNumbers}
                </div>
                <small class="text-muted d-block mt-2">انقر على أي رقم فاتورة لاستخدامه</small>
            </div>
        </div>
    `;
}

// Display all invoices
function displayAllInvoices(invoices) {
    const searchResult = document.getElementById('invoiceSearchResult');
    
    const invoicesHtml = invoices.map(invoice => `
        <tr>
            <td><code>${invoice.invoiceNumber || invoice.number}</code></td>
            <td>${invoice.customerName || 'غير محدد'}</td>
            <td>${new Date(invoice.invoiceDate || invoice.date).toLocaleDateString('ar-EG')}</td>
            <td class="text-end">${(invoice.totalAmount || invoice.total || 0).toFixed(2)} ج.م</td>
            <td class="text-center">
${getInvoiceStatusBadge(invoice.status || 'Paid')}
            </td>
            <td class="text-center">
                <button class="btn btn-sm btn-primary" onclick="useInvoiceNumber('${invoice.invoiceNumber || invoice.number}')">
                    <i class="fas fa-check"></i> استخدام
                </button>
            </td>
        </tr>
    `).join('');
    
    searchResult.innerHTML = `
        <div class="alert alert-info">
            <div class="d-flex align-items-center mb-3">
                <i class="fas fa-list fa-2x text-info me-3"></i>
                <div>
                    <h6 class="mb-1">📋 جميع الفواتير المتاحة</h6>
                    <small class="text-muted">إجمالي ${invoices.length} فاتورة</small>
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="table table-sm table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th>رقم الفاتورة</th>
                            <th>اسم العميل</th>
                            <th>التاريخ</th>
                            <th class="text-end">المبلغ</th>
                            <th class="text-center">الحالة</th>
                            <th class="text-center">إجراء</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${invoicesHtml}
                    </tbody>
                </table>
            </div>
        </div>
    `;
}

// Use selected invoice number
function useInvoiceNumber(invoiceNumber) {
    const invoiceInput = document.getElementById('originalInvoiceNumber');
    if (invoiceInput) {
        invoiceInput.value = invoiceNumber;
        invoiceInput.classList.add('is-valid');
        showMessage(`✅ تم تحديد الفاتورة: ${invoiceNumber}`, 'success');
        
        // Automatically search for the selected invoice
        setTimeout(() => {
            searchOriginalInvoice();
        }, 500);
    }
}

// Escape HTML to prevent XSS
function escapeHtml(unsafe) {
    return (unsafe || '')
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// Attach event listeners to return buttons
function attachReturnButtonListeners() {
    console.log('🔗 جاري ربط أزرار الإضافة...');
    
    const returnButtons = document.querySelectorAll('.add-to-return-btn');
    console.log(`🔍 تم العثور على ${returnButtons.length} زر`);
    
    returnButtons.forEach((button, index) => {
        console.log(`🔗 ربط الزر ${index + 1}:`, button);
        
        // Remove any existing listeners
        button.removeEventListener('click', handleReturnButtonClick);
        
        // Add new listener
        button.addEventListener('click', handleReturnButtonClick);
    });
    
    console.log(`✅ تم ربط ${returnButtons.length} زر إضافة للإرجاع`);
}

// Handle return item add button click (onclick method)
function handleReturnItemAdd(button) {
    console.log('🔄 Return item add clicked:', button);
    
    try {
        if (!button) {
            console.error('❌ Button not provided');
            alert('❌ خطأ في الزر');
            return;
        }
        
        // Disable button immediately to prevent multiple clicks
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الإضافة...';
        
        const productId = button.getAttribute('data-product-id');
        const productName = button.getAttribute('data-product-name');
        const availableQuantity = parseInt(button.getAttribute('data-quantity'));
        const price = parseFloat(button.getAttribute('data-price'));
        
        console.log('📊 Button data:', { productId, productName, availableQuantity, price });
        
        // Check if product is already in cart for return
        const existingReturnItem = cart.find(item => 
            (item.productId == productId || item.name === productName) && item.quantity < 0
        );
        
        if (existingReturnItem) {
            const currentReturnQuantity = Math.abs(existingReturnItem.quantity);
            const totalReturnQuantity = currentReturnQuantity + 1;
            
            if (totalReturnQuantity > availableQuantity) {
                alert(`❌ لا يمكن إرجاع أكثر من ${availableQuantity} قطعة من هذا المنتج!\nالكمية الحالية في السلة: ${currentReturnQuantity}`);
                // Re-enable button
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
                return;
            }
            
            console.log(`⚠️ Product already in cart for return. Current: ${currentReturnQuantity}, Adding: 1, Total will be: ${totalReturnQuantity}`);
        }
        
        if (!productName) {
            console.error('❌ Product name is missing');
            alert('❌ اسم المنتج مفقود');
            // Re-enable button
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
            return;
        }
        
        if (isNaN(availableQuantity) || availableQuantity <= 0) {
            console.error('❌ Invalid available quantity:', availableQuantity);
            alert('❌ الكمية المتاحة غير صحيحة');
            // Re-enable button
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
            return;
        }
        
        if (isNaN(price) || price < 0) {
            console.error('❌ Invalid price:', price);
            alert('❌ السعر غير صحيح');
            // Re-enable button
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
            return;
        }
        
        console.log('✅ All validations passed, calling addProductToCart for return...');
        
        // Ensure we're in return mode
        if (!isReturnMode) {
            console.log('🔄 Switching to return mode...');
            isReturnMode = true;
        }
        
        // Add to cart using productId and productName
        addProductToCart(productId || 0, productName, price);
        
        // Re-enable button after successful addition
        setTimeout(() => {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
        }, 1000); // Re-enable after 1 second
        
    } catch (error) {
        console.error('❌ Error in handleReturnItemAdd:', error);
        alert('❌ حدث خطأ في إضافة المنتج: ' + error.message);
        // Re-enable button on error
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-plus"></i> إضافة للإرجاع';
    }
}

// Handle return button click (event listener method - backup)
function handleReturnButtonClick(event) {
    event.preventDefault();
    event.stopPropagation();
    
    const button = event.target.closest('.add-to-return-btn');
    if (!button) {
        console.error('❌ Button not found');
        return;
    }
    
    handleReturnItemAdd(button);
}

// Add item to return cart
function addToReturnCart(itemName, maxQuantity, price) {
    console.log('🔄 Adding to return cart:', { itemName, maxQuantity, price });
    
    try {
        // Check if we're in return or exchange mode
        const currentMode = getCurrentMode();
        console.log('🔍 Current mode:', currentMode);
        
        if (getCurrentMode() !== 'return' && getCurrentMode() !== 'exchange') {
            showMessage('❌ يجب أن تكون في وضع الإرجاع أو الاستبدال لإضافة منتجات', 'error');
            return;
            }
        
        // Prompt user for quantity to return
        let quantityToReturn = prompt(`كم كمية تريد إرجاعها من "${itemName}"؟\nالحد الأقصى: ${maxQuantity}`, '1');
        
        if (quantityToReturn === null) {
            console.log('🚫 User cancelled quantity input');
            return; // User cancelled
        }
        
        quantityToReturn = parseInt(quantityToReturn);
        console.log('📊 Parsed quantity:', quantityToReturn);
        
        // Validate quantity
        if (isNaN(quantityToReturn) || quantityToReturn <= 0) {
            console.error('❌ Invalid quantity:', quantityToReturn);
            showMessage('❌ يرجى إدخال كمية صحيحة', 'error');
            return;
        }
        
        if (quantityToReturn > maxQuantity) {
            console.error('❌ Quantity exceeds maximum:', quantityToReturn, '>', maxQuantity);
            showMessage(`❌ لا يمكن إرجاع أكثر من ${maxQuantity} قطعة`, 'error');
            return;
        }
        
        // Make sure cart is available globally
        if (typeof cart === 'undefined') {
            console.log('🛒 Initializing global cart array');
            window.cart = [];
        }
        
        console.log('🛒 Current cart:', cart);
        
        // Check if item already exists in cart
        const existingItem = cart.find(item => item.name === itemName);
        console.log('🔍 Existing item:', existingItem);
        
        if (existingItem) {
            // Update existing item quantity
            const newQuantity = Math.abs(existingItem.quantity) + quantityToReturn;
            if (newQuantity > maxQuantity) {
                console.error('❌ Total quantity exceeds maximum:', newQuantity, '>', maxQuantity);
                showMessage(`❌ إجمالي الكمية المُرجعة لا يمكن أن يتجاوز ${maxQuantity}`, 'error');
                return;
            }
            existingItem.quantity = -newQuantity; // Negative for returns
            existingItem.total = -(existingItem.price * newQuantity);
            console.log('✅ Updated existing item:', existingItem);
        } else {
            // Add new item to cart with negative quantity (for returns)
            const returnItem = {
                id: Date.now(), // Unique ID
                productId: null, // Will be resolved on server side by product name
                name: itemName,
                price: price,
                quantity: -quantityToReturn, // Negative quantity for returns
                total: Math.round(-(price * quantityToReturn) * 100) / 100, // Negative total for returns, rounded
                isReturn: true,
                discount: 0
            };
            cart.push(returnItem);
            console.log('✅ Added new return item:', returnItem);
        }
        
        console.log('🛒 Updated cart:', cart);
        
        // Update cart display
        if (typeof updateCartDisplay === 'function') {
            updateCartDisplay();
            console.log('✅ Cart display updated');
        } else {
            console.warn('⚠️ updateCartDisplay function not available');
        }
        
        if (typeof updateCartSummary === 'function') {
            updateCartSummary();
            console.log('✅ Cart summary updated');
        } else {
            console.warn('⚠️ updateCartSummary function not available');
        }
        
        if (typeof updateProcessButtonState === 'function') {
            updateProcessButtonState();
            console.log('✅ Process button state updated');
        } else {
            console.warn('⚠️ updateProcessButtonState function not available');
        }
        
        // Show success message
        showMessage(`✅ تم إضافة ${quantityToReturn} من "${itemName}" إلى سلة ${getCurrentMode() === 'return' ? 'الإرجاع' : 'الاستبدال'}`, 'success');
        
        console.log('🎉 addToReturnCart completed successfully');
        
    } catch (error) {
        console.error('❌ Error in addToReturnCart:', error);
        showMessage('❌ حدث خطأ في إضافة المنتج: ' + error.message, 'error');
    }
}

// Update cart display in the UI
function updateCartDisplay() {
    console.log('🔄 Updating cart display...');
    
    // Try multiple possible cart container IDs/classes
    const cartContainer = document.getElementById('cartItems') || 
                         document.getElementById('cart-items') || 
                         document.querySelector('.cart-items') ||
                         document.querySelector('#cartTable tbody');
    
    if (!cartContainer) {
        console.error('❌ Cart container not found! Tried: cartItems, cart-items, .cart-items, #cartTable tbody');
        return;
    }
    
    console.log('✅ Found cart container:', cartContainer.id || cartContainer.className);
    
    // Clear existing items
    cartContainer.innerHTML = '';
    
    if (cart.length === 0) {
        cartContainer.innerHTML = `
            <tr id="emptyCart">
                <td colspan="6" class="text-center text-muted">
                    <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                    <br>
                    السلة فارغة - قم بإضافة منتجات
                </td>
            </tr>
        `;
        return;
    }
    
    // Display cart items
    cart.forEach((item, index) => {
        const isReturnItem = item.quantity < 0;
        const displayQuantity = Math.abs(item.quantity);
        const itemSubTotal = Math.abs(item.price * item.quantity);
        const displayTotal = Math.abs(item.total || itemSubTotal);
        const discount = item.discount || 0;
        
        const rowClass = isReturnItem ? 'return-item' : '';
        const quantityDisplay = isReturnItem ? `-${displayQuantity}` : displayQuantity;
        const totalDisplay = isReturnItem ? `-${displayTotal.toFixed(2)}` : displayTotal.toFixed(2);
        
        const itemHtml = `
            <tr class="${rowClass}" data-index="${index}">
                <td>
                    <div class="d-flex align-items-center">
                        ${isReturnItem ? '↩️' : '📦'}
                        <strong>${item.name}</strong>
                        ${item.color ? `<span class="badge bg-info ms-1">${item.color}</span>` : ''}
                        ${item.size ? `<span class="badge bg-secondary ms-1">${item.size}</span>` : ''}
                        ${isReturnItem ? '<span class="badge bg-danger ms-2">إرجاع</span>' : ''}
                    </div>
                </td>
                <td>${item.price.toFixed(2)} ج.م</td>
                <td>
                    <div class="quantity-controls">
                        ${!isReturnItem ? `
                            <button class="btn btn-sm btn-outline-secondary" onclick="decreaseQuantity(${index})">
                                ➖
                            </button>
                            <span class="quantity-display mx-2">${displayQuantity}</span>
                            <button class="btn btn-sm btn-outline-secondary" onclick="increaseQuantity(${index})">
                                ➕
                            </button>
                        ` : `
                            <span class="text-danger fw-bold">${quantityDisplay}</span>
                        `}
                    </div>
                </td>
                <td>
                    <input type="number" class="form-control form-control-sm discount-input" 
                           value="${discount}" min="0" step="0.01" 
                           onchange="updateDiscount(${index}, this.value)"
                           ${isReturnItem ? 'disabled' : ''}
                           placeholder="0.00">
                </td>
                <td class="${isReturnItem ? 'text-danger' : 'text-success'} fw-bold">
                    ${totalDisplay} ج.م
                    ${discount > 0 ? `<br><small class="text-muted">خصم: ${discount} ج.م</small>` : ''}
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart(${index})">
                        🗑️
                    </button>
                </td>
            </tr>
        `;
        
        cartContainer.insertAdjacentHTML('beforeend', itemHtml);
    });
}

// Update cart summary (totals, counts, etc.)
function updateCartSummary() {
    console.log('💰 Updating cart summary...');
    
    try {
        if (!cart || cart.length === 0) {
            // Reset all summaries to zero - using correct HTML element IDs
            updateSummaryElement('subtotal', '0.00 ج.م');
            updateSummaryElement('totalDiscount', '0.00 ج.م');
            updateSummaryElement('grandTotal', '0.00 ج.م');
            console.log('💰 Summary reset to zero');
            return;
        }
        
        let totalItems = 0;
        let totalAmount = 0;
        let totalDiscount = 0;
        let returnItems = 0;
        let saleItems = 0;
        
        cart.forEach(item => {
            const quantity = Math.abs(item.quantity);
            const itemSubTotal = item.price * item.quantity; // Don't use Math.abs here
            const itemTotal = item.total || itemSubTotal;
            const itemDiscount = item.discount || 0;
            const discountAmount = itemDiscount; // Direct amount, not percentage
            
            // Ensure item.total is correctly calculated with discount
            if (item.discount > 0) {
                const calculatedTotal = Math.abs(itemSubTotal) - discountAmount;
                item.total = item.quantity < 0 ? -calculatedTotal : calculatedTotal;
                
                // Log discount calculation for debugging
                console.log(`💰 Item discount calculation for ${item.name}:`, {
                    subtotal: Math.abs(itemSubTotal).toFixed(2),
                    discount: item.discount.toFixed(2),
                    total: item.total.toFixed(2),
                    mode: item.quantity < 0 ? 'return' : 'sale',
                    discountType: 'direct_amount',
                    savings: discountAmount.toFixed(2),
                    percentage: ((discountAmount / Math.abs(itemSubTotal)) * 100).toFixed(1) + '%',
                    validation: discountAmount <= Math.abs(itemSubTotal) ? 'valid' : 'invalid',
                    finalPrice: calculatedTotal.toFixed(2),
                    timestamp: new Date().toLocaleTimeString(),
                    itemId: item.id
                });
            }
            
            if (item.quantity < 0) {
                // Return item
                returnItems += quantity;
                totalAmount += itemSubTotal; // Add negative value for returns
                totalDiscount += discountAmount; // Add discount for returns
            } else {
                // Sale item
                saleItems += quantity;
                totalAmount += itemSubTotal; // Add positive value for sales
                totalDiscount += discountAmount; // Add discount for sales
            }
            
            totalItems += quantity;
        });
        
        // Get shipping cost
        const shippingCostInput = document.getElementById('shippingCost');
        const shippingCost = parseFloat(shippingCostInput?.value || 0);
        
        const finalTotal = totalAmount - totalDiscount + shippingCost;
        
        // Update UI elements - using correct HTML element IDs
        updateSummaryElement('subtotal', Math.abs(totalAmount).toFixed(2) + ' ج.م');
        updateSummaryElement('totalDiscount', Math.abs(totalDiscount).toFixed(2) + ' ج.م');
        updateSummaryElement('shippingCostDisplay', shippingCost.toFixed(2) + ' ج.م');
        updateSummaryElement('grandTotal', finalTotal.toFixed(2) + ' ج.م');
        
        // Log detailed calculation for debugging
        console.log('💰 Detailed calculation:', {
            totalAmount: totalAmount.toFixed(2),
            totalDiscount: totalDiscount.toFixed(2),
            shippingCost: shippingCost.toFixed(2),
            finalTotal: finalTotal.toFixed(2),
            items: cart.map(item => ({
                name: item.name,
                price: item.price,
                quantity: item.quantity,
                discount: item.discount,
                subtotal: (Math.abs(item.price * item.quantity)).toFixed(2),
                discountAmount: (item.discount || 0).toFixed(2), // Direct amount
                total: item.total.toFixed(2)
            }))
        });
        
        // Update final total color based on positive/negative
        const finalTotalElement = document.getElementById('grandTotal');
        if (finalTotalElement) {
            finalTotalElement.className = finalTotal >= 0 ? 'summary-value success' : 'summary-value danger';
        }
        
        console.log('💰 Summary updated:', {
            totalItems,
            saleItems,
            returnItems,
            totalAmount,
            totalDiscount,
            shippingCost,
            finalTotal
        });
        
        // Update remaining amount if payment input exists
        const amountPaidInput = document.getElementById('amountPaid');
        if (amountPaidInput && amountPaidInput.value) {
            const amountPaid = parseFloat(amountPaidInput.value || 0);
            const remaining = finalTotal - amountPaid;
            updateRemainingAmountDisplay(remaining);
        }
        
        // Remove automatic payment validation - let user control payment amount
        // if (typeof validatePaymentAmount === 'function') {
        //     validatePaymentAmount();
        // }
        
    } catch (error) {
        console.error('❌ Error updating cart summary:', error);
    }
}

// Helper function to update summary elements safely
function updateSummaryElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        const oldValue = element.textContent;
        element.textContent = value;
        console.log(`📊 Updated ${elementId}: ${oldValue} → ${value}`);
    } else {
        console.warn(`⚠️ Summary element not found: ${elementId}`);
    }
}

// Increase item quantity in cart
function increaseQuantity(index) {
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        if (item.quantity > 0) { // Only for sale items, not returns
            item.quantity += 1;
            
            // Recalculate total with discount
            const itemSubTotal = Math.abs(item.price * item.quantity);
            const discountAmount = item.discount || 0; // Direct amount
            item.total = Math.round((itemSubTotal - discountAmount) * 100) / 100;
            
            updateCartDisplay();
            updateCartSummary();
            if (typeof updateProcessButtonState === 'function') {
            updateProcessButtonState();
            }
            showMessage(`✅ تم زيادة كمية "${item.name}"`, 'success');
        }
    }
}

// Decrease item quantity in cart
function decreaseQuantity(index) {
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        if (item.quantity > 1) { // Keep at least 1
            item.quantity -= 1;
            
            // Recalculate total with discount
            const itemSubTotal = Math.abs(item.price * item.quantity);
            const discountAmount = item.discount || 0; // Direct amount
            item.total = Math.round((itemSubTotal - discountAmount) * 100) / 100;
            
            updateCartDisplay();
            updateCartSummary();
            if (typeof updateProcessButtonState === 'function') {
            updateProcessButtonState();
            }
            showMessage(`✅ تم تقليل كمية "${item.name}"`, 'success');
        } else if (item.quantity === 1) {
            // Remove item if quantity becomes 0
            removeFromCart(index);
        }
    }
}

// Remove item from cart
function removeFromCart(index) {
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        const itemName = item.name;
        cart.splice(index, 1);
        updateCartDisplay();
        updateCartSummary();
        if (typeof updateProcessButtonState === 'function') {
        updateProcessButtonState();
        }
        showMessage(`🗑️ تم حذف "${itemName}" من السلة`, 'info');
    }
}

// Update discount for an item
function updateDiscount(index, discountValue) {
    if (index >= 0 && index < cart.length) {
        const item = cart[index];
        const discount = parseFloat(discountValue) || 0;
        
        // Apply discount as direct amount (not percentage)
        const itemSubTotal = Math.abs(item.price * item.quantity);
        item.discount = validateDiscountAmount(discount, itemSubTotal); // Validate discount amount
        
        // Recalculate total with discount
        const discountAmount = item.discount; // Direct amount
        const newTotal = itemSubTotal - discountAmount;
        
        // Keep negative for return items
        item.total = item.quantity < 0 ? -newTotal : newTotal;
        
        updateCartDisplay();
        updateCartSummary();
        
        console.log(`💰 Discount updated for ${item.name}: ${discount} ج.م (Direct amount)`);
        
        // Show confirmation message
        if (discount > 0) {
            const originalDiscount = parseFloat(discountValue) || 0;
            if (originalDiscount > itemSubTotal) {
                showMessage(`⚠️ تم تعديل الخصم من ${originalDiscount} إلى ${discount} ج.م (لا يمكن أن يتجاوز قيمة المنتج)`, 'warning');
            } else {
                showMessage(`✅ تم تطبيق خصم ${discount} ج.م على "${item.name}"`, 'success');
            }
        } else {
            showMessage(`✅ تم إلغاء الخصم من "${item.name}"`, 'info');
        }
    }
}

// Initialize customer form validation
function initializeCustomerValidation() {
    console.log('🔧 تهيئة نظام التحقق من بيانات العميل...');
    
    // Add event listeners for real-time validation
    const nameField = document.getElementById('customerName');
    const phoneField = document.getElementById('customerPhoneInput');
    const emailField = document.getElementById('customerEmail');
    const additionalPhoneField = document.getElementById('customerAdditionalPhone');
    const phoneSearchField = document.getElementById('customerPhone');
    
    // Name field validation
    if (nameField) {
        nameField.addEventListener('blur', validateCustomerForm);
        nameField.addEventListener('input', function() {
            if (this.value.trim().length >= 2) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else if (this.value.trim().length > 0) {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });
    }
    
    // Phone field validation
    if (phoneField) {
        phoneField.addEventListener('blur', validateCustomerForm);
        phoneField.addEventListener('input', function() {
            // Format phone number as user types
            let value = this.value.replace(/\D/g, '');
            if (value.length > 11) value = value.substring(0, 11);
            this.value = value;
            
            if (/^[0-9]{11}$/.test(value)) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else if (value.length > 0) {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });
    }
    
    // Email field validation
    if (emailField) {
        emailField.addEventListener('blur', validateCustomerForm);
        emailField.addEventListener('input', function() {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (this.value.trim() === '') {
                this.classList.remove('is-valid', 'is-invalid');
            } else if (emailRegex.test(this.value.trim())) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            }
        });
    }
    
    // Additional phone field validation
    if (additionalPhoneField) {
        additionalPhoneField.addEventListener('input', function() {
            // Format phone number as user types
            let value = this.value.replace(/\D/g, '');
            if (value.length > 11) value = value.substring(0, 11);
            this.value = value;
            
            if (value === '') {
                this.classList.remove('is-valid', 'is-invalid');
            } else if (/^[0-9]{11}$/.test(value)) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            }
        });
    }
    
    // Phone search field formatting
    if (phoneSearchField) {
        phoneSearchField.addEventListener('input', function() {
            // Format phone number as user types
            let value = this.value.replace(/\D/g, '');
            if (value.length > 11) value = value.substring(0, 11);
            this.value = value;
        });
        
        // Allow Enter key to trigger search
        phoneSearchField.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchCustomerByPhone();
            }
        });
    }
    
    console.log('✅ تم تهيئة نظام التحقق من البيانات');
}

// Initialize mode-specific features
function initializeModeFeatures() {
    console.log('🔧 تهيئة ميزات أوضاع التشغيل...');
    
    // Add event listeners for invoice search
    const invoiceInput = document.getElementById('originalInvoiceNumber');
    if (invoiceInput) {
        // Allow Enter key to trigger search
        invoiceInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchOriginalInvoice();
            }
        });
        
        // Real-time validation
        invoiceInput.addEventListener('input', function() {
            const value = this.value.trim();
            if (value.length >= 3) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
            } else if (value.length > 0) {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });
    }
    
    // Add event listeners for reason select
    const reasonSelect = document.getElementById('reasonSelect');
    if (reasonSelect) {
        reasonSelect.addEventListener('change', function() {
            if (this.value) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
                
                // Show additional options based on reason
                updateAdditionalOptions(this.value);
            } else {
                this.classList.remove('is-valid');
                this.classList.add('is-invalid');
            }
        });
    }
    
    // Initialize default mode with stability
    setTimeout(() => {
        switchMode('sale');
        
        // Force show QR scanner mode and ensure visibility
        setTimeout(() => {
            forceShowQRMode();
            switchSearchMode('qr');
        }, 200);
    }, 300);
    
    console.log('✅ تم تهيئة ميزات أوضاع التشغيل');
}

// Update additional options based on return reason
function updateAdditionalOptions(reason) {
    const shippingRefund = document.getElementById('includeShippingRefund');
    const exchangeWithDifference = document.getElementById('exchangeWithDifference');
    
    if (!shippingRefund || !exchangeWithDifference) return;
    
    // Reset options
    shippingRefund.checked = false;
    exchangeWithDifference.checked = false;
    
    // Set default options based on reason
    switch (reason) {
        case 'defective':
        case 'damaged':
        case 'quality_issue':
            shippingRefund.checked = true; // Automatically include shipping refund for defective items
            break;
        case 'size_issue':
        case 'customer_change':
            exchangeWithDifference.checked = true; // Suggest exchange for size/preference issues
            break;
        default:
            // Keep defaults unchecked
            break;
    }
    
    console.log(`📋 تم تحديث الخيارات الإضافية للسبب: ${reason}`);
}

// Export functions to global scope for onclick handlers
window.getCurrentMode = getCurrentMode;
window.testJS = testJS;
window.testReturnCart = testReturnCart;
window.addItemDirectly = addItemDirectly;
window.testCartDisplay = testCartDisplay;
window.testProductQuantity = testProductQuantity;
window.testManualUpdate = testManualUpdate;
window.searchProducts = searchProducts;
window.getProductSuggestions = getProductSuggestions;
window.initializeLiveSearch = initializeLiveSearch;
window.displaySearchResults = displaySearchResults;
window.selectSearchResult = selectSearchResult;
window.addProductToCart = addProductToCart;
window.updateQRStatus = updateQRStatus;
window.clearQRInput = clearQRInput;
window.debugAllProducts = debugAllProducts;
window.testQRSearch = testQRSearch;
window.simpleQRSearch = simpleQRSearch;
window.simpleBarcodeSearch = simpleBarcodeSearch;
window.quickBarcode = quickBarcode;
window.testManualInput = testManualInput;
window.simulateEnter = simulateEnter;
window.testNow = testNow;
window.performAdvancedSearch = performAdvancedSearch;
window.displayAdvancedSearchResults = displayAdvancedSearchResults;
window.initializeSearchMode = initializeSearchMode;
window.initializeQRMode = initializeQRMode;
window.initializeNameSearchMode = initializeNameSearchMode;
window.initializeAdvancedSearchMode = initializeAdvancedSearchMode;
window.loadSearchFilters = loadSearchFilters;
window.clearProductNameSearch = clearProductNameSearch;
window.showPopularProducts = showPopularProducts;
window.clearAdvancedFilters = clearAdvancedFilters;
window.hideToast = hideToast;
window.closeToast = closeToast;
window.processScannerInput = processScannerInput;
window.refocusQRInput = refocusQRInput;
window.playSuccessSound = playSuccessSound;
window.updateScannerStats = updateScannerStats;
window.initializeScannerStats = initializeScannerStats;
window.forceShowQRMode = forceShowQRMode;
window.startQRVisibilityMonitor = startQRVisibilityMonitor;
window.fixQRDisplay = fixQRDisplay;
window.isUserInteractingWithOtherElements = isUserInteractingWithOtherElements;
window.disableQRForcing = disableQRForcing;
window.testAllButtons = testAllButtons;
window.switchMode = switchMode;
window.switchSearchMode = switchSearchMode;
window.clearCart = clearCart;
window.addToCart = addToCart;
window.searchCustomerByPhone = searchCustomerByPhone;
window.handleCustomerSelection = handleCustomerSelection;
window.fillCustomerDataFromSearch = fillCustomerDataFromSearch;
window.updateCustomerSelect = updateCustomerSelect;
window.clearCustomerData = clearCustomerData;
window.validateCustomerForm = validateCustomerForm;
window.searchOriginalInvoice = searchOriginalInvoice;
window.showAllInvoices = showAllInvoices;
window.useInvoiceNumber = useInvoiceNumber;
window.addToReturnCart = addToReturnCart;
window.handleReturnItemAdd = handleReturnItemAdd;
window.attachReturnButtonListeners = attachReturnButtonListeners;
window.handleReturnButtonClick = handleReturnButtonClick;
window.updateCartDisplay = updateCartDisplay;
window.updateCartSummary = updateCartSummary;
window.updateSummaryElement = updateSummaryElement;
window.increaseQuantity = increaseQuantity;
window.decreaseQuantity = decreaseQuantity;
window.removeFromCart = removeFromCart;
window.updateDiscount = updateDiscount;
window.processTransaction = processTransaction;
window.collectCustomerData = collectCustomerData;
window.prepareTransactionData = prepareTransactionData;
window.getInvoiceTypeFromMode = getInvoiceTypeFromMode;
window.getModeName = getModeName;
window.sendTransactionToServer = sendTransactionToServer;
window.handleTransactionSuccess = handleTransactionSuccess;
window.verifyInventoryUpdates = verifyInventoryUpdates;
window.handleTransactionError = handleTransactionError;
window.resetTransactionForm = resetTransactionForm;
window.printInvoice = printInvoice;
window.showMessage = showMessage;



// Helper function to calculate item total with discount
function calculateItemTotalWithDiscount(item) {
    const itemSubTotal = Math.abs(item.price * item.quantity);
    const discountAmount = item.discount || 0; // Direct amount
    const total = itemSubTotal - discountAmount;
    const roundedTotal = Math.round(total * 100) / 100; // Round to 2 decimal places
    return item.quantity < 0 ? -roundedTotal : roundedTotal;
}

// Helper function to validate discount amount
function validateDiscountAmount(discount, itemSubTotal) {
    const maxDiscount = itemSubTotal; // Cannot discount more than the subtotal
    const validatedDiscount = Math.max(0, Math.min(discount, maxDiscount));
    
    if (discount > maxDiscount) {
        console.warn(`⚠️ Discount ${discount} exceeds subtotal ${itemSubTotal}, adjusted to ${validatedDiscount}`);
    }
    
    return validatedDiscount;
}

// Add CSS for return items if not already added
if (!document.querySelector('#return-item-styles')) {
    const style = document.createElement('style');
    style.id = 'return-item-styles';
    style.textContent = `
        .return-item {
            background-color: #fff2f2 !important;
            border-left: 4px solid #dc3545 !important;
        }
        .return-item .badge {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
    `;
    document.head.appendChild(style);
}

console.log('📄 ملف cashier.js تم تحميله بنجاح');

// Quick test functions available in console:
console.log('🧪 دوال الاختبار المتاحة:');
console.log('  - testPaymentAmount(100) - اختبار مبلغ محدد');
console.log('  - testRealTimeCalculations() - اختبار شامل');
console.log('  - testAllCashierCalculations() - اختبار جميع العمليات');
console.log('  - testPaymentSystem() - اختبار نظام الدفع');
console.log('💡 مثال: testPaymentAmount(50) لاختبار المبلغ المدفوع 50 ج.م');
console.log('💡 مثال: testSpecificAmount() لاختبار المبلغ 50 ج.م المحدد');
console.log('💡 مثال: testShippingCost() لاختبار مصاريف الشحن');

// Test the specific amount mentioned by user
function testSpecificAmount() {
    console.log('🧪 اختبار المبلغ المحدد: 50 ج.م');
    testPaymentAmount(50);
    
    // Expected results:
    // - Grand Total: 620.00 ج.م (if test items are loaded)
    // - Amount Paid: 50.00 ج.م
    // - Remaining: 570.00 ج.م
    
    console.log('📊 النتائج المتوقعة:');
    console.log('  - إجمالي الفاتورة: 620.00 ج.م');
    console.log('  - المبلغ المدفوع: 50.00 ج.م');
    console.log('  - المتبقي: 570.00 ج.م');
}

window.testSpecificAmount = testSpecificAmount;

// Test Toast Notifications
function testToastNotifications() {
    console.log('🧪 اختبار Toast Notifications...');
    
    // Test different types of messages
    setTimeout(() => showMessage('✅ رسالة نجاح - Toast يعمل بشكل صحيح!', 'success'), 1000);
    setTimeout(() => showMessage('ℹ️ رسالة معلومات - نظام الكاشير جاهز', 'info'), 3000);
    setTimeout(() => showMessage('⚠️ رسالة تحذير - تأكد من البيانات', 'warning'), 5000);
    setTimeout(() => showMessage('❌ رسالة خطأ - حدث خطأ ما', 'error'), 7000);
}

// Test specific messages mentioned by user
function testSpecificMessages() {
    console.log('🧪 اختبار الرسائل المحددة...');
    
    // Test the specific message from user's console
    setTimeout(() => showMessage('💰 إجمالي الفاتورة: 620.00 ج.م | المدفوع: 250.00 ج.م | المتبقي: 370.00 ج.م', 'info'), 1000);
    
    // Test cart calculations
    setTimeout(() => showMessage('💰 Cart Grand Total Calculation: {totalAmount: \'650.00\', totalDiscount: \'30.00\', finalTotal: \'620.00\'}', 'info'), 3000);
    
    // Test remaining amount
    setTimeout(() => showMessage('💰 Remaining Amount Calculation: {grandTotal: \'620.00\', amountPaid: \'250.00\', remaining: \'370.00\'}', 'info'), 5000);
}

// Comprehensive test for all cashier calculations
function testAllCashierCalculations() {
    console.log('🧪 اختبار شامل لجميع العمليات الحسابية في الكاشير...');
    
    // Test 1: Add test items to cart
    console.log('📦 إضافة منتجات اختبار للسلة...');
    
    // Clear cart first
    cart = [];
    
    // Add test items
    const testItems = [
        { id: 1, name: 'منتج اختبار 1', price: 100, quantity: 2, discount: 10 },
        { id: 2, name: 'منتج اختبار 2', price: 150, quantity: 1, discount: 0 },
        { id: 3, name: 'منتج اختبار 3', price: 200, quantity: 1, discount: 20 }
    ];
    
    cart = testItems.map(item => ({
        ...item,
        total: Math.round(((item.price * item.quantity) - item.discount) * 100) / 100
    }));
    
    console.log('📦 المنتجات المضافة:', cart);
    
    // Test 2: Update cart summary
    console.log('💰 تحديث ملخص السلة...');
    updateCartSummary();
    
    // Test 3: Test payment scenarios
    console.log('💳 اختبار سيناريوهات الدفع...');
    
    const amountPaidInput = document.getElementById('amountPaid');
    if (amountPaidInput) {
        const testPayments = [
            { amount: 0, desc: 'غير مدفوع' },
            { amount: 200, desc: 'مدفوع جزئياً' },
            { amount: 520, desc: 'مدفوع بالكامل' },
            { amount: 600, desc: 'مدفوع زائد' }
        ];
        
        testPayments.forEach((test, index) => {
            setTimeout(() => {
                console.log(`💳 اختبار ${index + 1}: ${test.desc} - ${test.amount} ج.م`);
                amountPaidInput.value = test.amount;
                validatePaymentAmount();
            }, (index + 1) * 2000);
        });
    }
    
    // Test 4: Verify all calculations
    setTimeout(() => {
        console.log('✅ تم الانتهاء من جميع الاختبارات');
        console.log('📊 النتائج النهائية:');
        console.log('  - إجمالي السلة:', getCartGrandTotal().toFixed(2), 'ج.م');
        console.log('  - المبلغ المدفوع:', amountPaidInput?.value || '0', 'ج.م');
        console.log('  - المتبقي:', (getCartGrandTotal() - parseFloat(amountPaidInput?.value || 0)).toFixed(2), 'ج.م');
    }, 10000);
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 تهيئة صفحة الكاشير...');
    
    // Check if color/size modal is available
    const colorSizeModal = document.getElementById('colorSizeSelectionModal');
    if (colorSizeModal) {
        console.log('✅ Color/Size selection modal found');
    } else {
        console.error('❌ Color/Size selection modal not found!');
    }
    
    // Check if Bootstrap is available
    if (typeof bootstrap !== 'undefined') {
        console.log('✅ Bootstrap is available');
    } else {
        console.error('❌ Bootstrap is not available!');
    }
    
    // Test toast notifications after page load
    setTimeout(testToastNotifications, 2000);
    
    // Initialize default search mode (QR)
    setTimeout(() => {
        console.log('🔧 تهيئة وضع QR...');
        currentSearchMode = 'qr';
        initializeQRMode();
        
        // Also update UI to show QR mode is active
        const qrModeBtn = document.getElementById('qrModeBtn');
        if (qrModeBtn) {
            qrModeBtn.classList.add('active');
        }
        
        // Update QR status
        updateQRStatus('ready', 'جاهز للمسح');
        
        // ULTRA SIMPLE QR Setup
        const qrInput = document.getElementById('qrCodeInput');
        if (qrInput) {
            console.log('🔧 Setting up ULTRA SIMPLE QR...');
            
            // SUPER SIMPLE: Just handle Enter key
            qrInput.onkeydown = function(e) {
                console.log('Key pressed:', e.key);
                if (e.key === 'Enter') {
                    console.log('Enter detected!');
                    const code = this.value.trim();
                    console.log('Code:', code);
                    if (code) {
                        console.log('Searching for:', code);
                        this.value = '';
                        simpleQRSearch(code);
                    }
                }
            };
            
            qrInput.focus();
            console.log('✅ ULTRA SIMPLE QR Ready!');
            console.log('💡 Type code and press Enter');
        } else {
            console.error('❌ QR input not found!');
        }
        
        console.log('✅ تم تهيئة وضع QR بنجاح');
    }, 500); // Small delay to ensure DOM is fully loaded
    
    console.log('✅ تمت تهيئة صفحة الكاشير بنجاح');
});

// Color and Size Selection Functions

// Show color/size selection for cart (manual selection)
function showColorSizeSelectionForCart() {
    // Get the first product from cart to use as reference
    if (!cart || cart.length === 0) {
        alert('❌ السلة فارغة! يرجى إضافة منتج أولاً');
        return;
    }
    
    const firstProduct = cart[0];
    showColorSizeSelection(firstProduct.productId, firstProduct.name, firstProduct.price);
}

// Add product to cart with modal selection (for manual color/size selection)
function addProductToCartWithModal(productId, productName, productPrice) {
    showColorSizeSelection(productId, productName, productPrice);
}

function showColorSizeSelection(productId, productName, productPrice) {
    console.log('🎨 Showing color/size selection for:', productName);
    
    selectedProductInfo = { productId, productName, productPrice };

    // Reset selections
    const colorSelect = document.getElementById('selectedColor');
    const sizeSelect = document.getElementById('selectedSize');
    
    if (colorSelect) colorSelect.value = '';
    if (sizeSelect) sizeSelect.value = '';

    // Check if modal exists
    const modalElement = document.getElementById('colorSizeSelectionModal');
    if (!modalElement) {
        console.error('❌ Color/Size selection modal not found!');
        alert('❌ خطأ: مودال اختيار اللون والمقاس غير موجود');
        return;
    }

    // Check if Bootstrap is available
    if (typeof bootstrap === 'undefined') {
        console.error('❌ Bootstrap is not available!');
        alert('❌ خطأ: Bootstrap غير متاح');
        return;
    }

    // Show modal
    try {
        // Remove any existing backdrop first
        const existingBackdrop = document.querySelector('.modal-backdrop');
        if (existingBackdrop) {
            existingBackdrop.remove();
        }
        
        // Remove modal-open class from body
        document.body.classList.remove('modal-open');
        
        // Create and show modal
        const modal = new bootstrap.Modal(modalElement, {
            backdrop: true,
            keyboard: true,
            focus: true
        });
        
        modal.show();
        console.log('✅ Modal shown successfully');
        
        // Focus on first select after modal is shown
        setTimeout(() => {
            const firstSelect = document.getElementById('selectedColor');
            if (firstSelect) {
                firstSelect.focus();
            }
            
            // Verify confirm button is working
            const confirmButton = document.getElementById('confirmColorSize');
            if (confirmButton) {
                console.log('✅ Confirm button is available in modal');
                // Ensure onclick is set
                if (!confirmButton.onclick) {
                    confirmButton.onclick = handleColorSizeConfirm;
                    console.log('✅ Set onclick handler for confirm button');
                }
            } else {
                console.error('❌ Confirm button not found in modal');
            }
        }, 300);
        
    } catch (error) {
        console.error('❌ Error showing modal:', error);
        alert('❌ خطأ في عرض مودال اختيار اللون والمقاس');
    }
}

// Add event listener for confirm button
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔧 Setting up color/size selection modal...');
    
    // Wait a bit for modal to be loaded
    setTimeout(() => {
        setupColorSizeModal();
    }, 100);
});

// Setup color/size modal event listeners
function setupColorSizeModal() {
    const confirmButton = document.getElementById('confirmColorSize');
    const modalElement = document.getElementById('colorSizeSelectionModal');
    
    if (!modalElement) {
        console.error('❌ Color/Size selection modal not found during setup!');
        return;
    }
    
    if (!confirmButton) {
        console.error('❌ Confirm button not found in modal!');
        return;
    }
    
    console.log('✅ Modal and confirm button found, setting up event listener...');
    
    // Remove any existing event listeners
    const newConfirmButton = confirmButton.cloneNode(true);
    confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
    
    // Add new event listener
    newConfirmButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('🎯 Confirm button clicked');
        
        const selectedColor = document.getElementById('selectedColor')?.value || '';
        const selectedSize = document.getElementById('selectedSize')?.value || '';

        console.log('🎨 Selected color:', selectedColor);
        console.log('📏 Selected size:', selectedSize);

        if (!selectedColor || !selectedSize) {
            alert('⚠️ يرجى اختيار اللون والمقاس');
            return;
        }

        if (selectedProductInfo) {
            console.log('📦 Adding product with color/size:', selectedProductInfo);
            
            // Add to cart with color and size info
            addProductToCartWithColorSize(
                selectedProductInfo.productId,
                selectedProductInfo.productName,
                selectedProductInfo.productPrice,
                selectedColor,
                selectedSize
            );

            // Close modal
            try {
                const modal = bootstrap.Modal.getInstance(modalElement);
                if (modal) {
                    modal.hide();
                    console.log('✅ Modal closed successfully');
                } else {
                    console.warn('⚠️ Could not get modal instance, using cleanup function');
                    cleanupModal();
                }
            } catch (error) {
                console.error('❌ Error closing modal:', error);
                cleanupModal();
            }

            selectedProductInfo = null;
        } else {
            console.error('❌ No selected product info available!');
            alert('❌ خطأ: معلومات المنتج غير متاحة');
        }
    });
    
    console.log('✅ Color/size selection modal setup completed');
    
    // Add event listener for cancel button
    const cancelButton = modalElement.querySelector('.btn-secondary');
    if (cancelButton) {
        const newCancelButton = cancelButton.cloneNode(true);
        cancelButton.parentNode.replaceChild(newCancelButton, cancelButton);
        
        newCancelButton.addEventListener('click', function() {
            console.log('❌ Cancel button clicked');
            selectedProductInfo = null;
            cleanupModal();
        });
    }
    
    // Add event listener for modal close (X button)
    const closeButton = modalElement.querySelector('.btn-close');
    if (closeButton) {
        const newCloseButton = closeButton.cloneNode(true);
        closeButton.parentNode.replaceChild(newCloseButton, closeButton);
        
        newCloseButton.addEventListener('click', function() {
            console.log('❌ Close button clicked');
            selectedProductInfo = null;
            cleanupModal();
        });
    }
    
    // Add event listener for backdrop click
    modalElement.addEventListener('click', function(event) {
        if (event.target === modalElement) {
            console.log('❌ Backdrop clicked');
            selectedProductInfo = null;
            cleanupModal();
        }
    });
}

// Handle color/size confirmation
function handleColorSizeConfirm() {
    console.log('🎯 handleColorSizeConfirm called');
    
    const selectedColor = document.getElementById('selectedColor')?.value || '';
    const selectedSize = document.getElementById('selectedSize')?.value || '';
    const modalElement = document.getElementById('colorSizeSelectionModal');

    console.log('🎨 Selected color:', selectedColor);
    console.log('📏 Selected size:', selectedSize);

    if (!selectedColor || !selectedSize) {
        alert('⚠️ يرجى اختيار اللون والمقاس');
        return;
    }

    if (selectedProductInfo) {
        console.log('📦 Adding product with color/size:', selectedProductInfo);
        
        // Add to cart with color and size info
        addProductToCartWithColorSize(
            selectedProductInfo.productId,
            selectedProductInfo.productName,
            selectedProductInfo.productPrice,
            selectedColor,
            selectedSize
        );

        // Close modal
        try {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
                console.log('✅ Modal closed successfully');
            } else {
                console.warn('⚠️ Could not get modal instance, using cleanup function');
                cleanupModal();
            }
        } catch (error) {
            console.error('❌ Error closing modal:', error);
            cleanupModal();
        }

        selectedProductInfo = null;
    } else {
        console.error('❌ No selected product info available!');
        alert('❌ خطأ: معلومات المنتج غير متاحة');
    }
}

// Helper function to clean up modal
function cleanupModal() {
    const modalElement = document.getElementById('colorSizeSelectionModal');
    if (modalElement) {
        // Remove modal-open class from body
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        
        // Remove backdrop
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) {
            backdrop.remove();
        }
        
        // Reset modal state
        modalElement.classList.remove('show');
        modalElement.style.display = 'none';
        modalElement.setAttribute('aria-hidden', 'true');
    }
}

function addProductToCartWithColorSize(productId, productName, productPrice, color, size) {
    console.log(`🔄 Adding product to cart with color/size: ${productName} (${color}, ${size})`);
    
    // Enhanced input validation
    if (!productId || !productName || productPrice === null || productPrice === undefined) {
        console.error('❌ Invalid parameters for addProductToCartWithColorSize:', { productId, productName, productPrice, color, size });
        showMessage('❌ بيانات المنتج غير صحيحة', 'error');
        return;
    }
    
    // Enhanced duplicate prevention at cart level
    const now = Date.now();
    const cartKey = `${productId}_${productName}_${color || ''}_${size || ''}`;
    
    // Initialize cart tracker
    if (!window.cartAddTracker) {
        window.cartAddTracker = {};
    }
    
    // Prevent adding the same product within 5 seconds (increased for better reliability)
    if (window.cartAddTracker[cartKey] && (now - window.cartAddTracker[cartKey]) < 5000) {
        console.log(`⚠️ Cart: Preventing duplicate add of ${productName} (last added ${now - window.cartAddTracker[cartKey]}ms ago)`);
        showMessage(`تم منع إضافة ${productName} مرة أخرى (منع التكرار)`, 'warning');
        return;
    }
    
    // Also check for any product with same ID being added within 2 seconds (global prevention)
    const globalKey = `product_${productId}`;
    if (window.cartAddTracker[globalKey] && (now - window.cartAddTracker[globalKey]) < 2000) {
        console.log(`⚠️ Cart: Preventing duplicate add of product ID ${productId} (last added ${now - window.cartAddTracker[globalKey]}ms ago)`);
        showMessage(`تم منع إضافة هذا المنتج مرة أخرى (منع التكرار)`, 'warning');
        return;
    }
    
    // Update both trackers
    window.cartAddTracker[cartKey] = now;
    window.cartAddTracker[globalKey] = now;
    
    try {
        console.log(`🔄 Adding product to cart: ID=${productId}, Name="${productName}", Price=${productPrice}, Color=${color}, Size=${size}`);
        console.log(`🔄 Return mode: ${isReturnMode}`);
        
        // Determine quantity based on current mode
        const baseQuantity = 1;
        const quantity = isReturnMode ? -baseQuantity : baseQuantity;
        const total = quantity * productPrice;
        
        console.log(`📊 Calculated: Quantity=${quantity}, Total=${total}`);
        
        // Validate productId
        if (!productId || productId === 0) {
            console.error('❌ Invalid productId:', productId);
            alert('❌ معرف المنتج غير صحيح');
            return;
        }
        
        // Create cart item with color and size
        const cartItem = {
            id: Date.now(),
            productId: parseInt(productId),
            name: productName,
            price: parseFloat(productPrice),
            quantity: quantity,
            total: total,
            discount: 0,
            color: color,
            size: size
        };
        
        // Ensure total is correctly calculated
        cartItem.total = quantity * productPrice;
        
        console.log('📦 Created cart item with color/size:', cartItem);
        
        // Check for duplicate returns prevention
        if (isReturnMode) {
            const existingReturnItem = cart.find(item => 
                (item.productId == cartItem.productId || item.name === cartItem.name) && 
                item.quantity < 0 && 
                item.color === color && 
                item.size === size
            );
            
            if (existingReturnItem) {
                console.log(`⚠️ Product with same color/size already in cart for return, updating quantity instead of adding new item`);
                existingReturnItem.quantity -= 1;
                
                // Recalculate total with discount
                const itemSubTotal = Math.abs(existingReturnItem.price * existingReturnItem.quantity);
                const discountAmount = existingReturnItem.discount || 0;
                existingReturnItem.total = Math.round(-(itemSubTotal - discountAmount) * 100) / 100;
                
                console.log(`📊 Updated existing return item:`, existingReturnItem);
            } else {
                // Add to cart
                cart.push(cartItem);
            }
        } else {
            // Add to cart normally for sales
            cart.push(cartItem);
        }
        
        window.cart = cart;
        
        // Update display
        updateCartDisplay();
        updateCartSummary();
        
        // Update process button state safely
        if (typeof updateProcessButtonState === 'function') {
            updateProcessButtonState();
        } else {
            console.warn('⚠️ updateProcessButtonState function not available');
        }
        
        const modeText = isReturnMode ? 'للإرجاع' : 'للبيع';
        console.log(`✅ Added ${modeText}: ${productName} (Qty: ${quantity}, Color: ${color}, Size: ${size})`);
        console.log('🛒 Cart after addition:', cart);
        console.log('🛒 Total items in cart:', cart.length);
        
    } catch (error) {
        console.error('❌ Error adding product to cart:', error);
        alert('❌ حدث خطأ أثناء إضافة المنتج للسلة');
    }
}

// Make functions available globally
window.showColorSizeSelectionForCart = showColorSizeSelectionForCart;
window.addProductToCartWithModal = addProductToCartWithModal;